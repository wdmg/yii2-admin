!function(e){e.fn.preLoadImages=function(t){var n=[];e(this).find("img").each((function(){var t=e.Deferred(),o=new Image;o.onload=function(){t.resolve(o.src)},o.src=e(this).attr("src"),n.push(t)})),e.when.apply(null,n).done(t)}}(jQuery),String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+/,"").replace(/\s+$/,"")},String.prototype.replaceAll=function(e,t){var n=this;if("object"==typeof e)for(var o=0;o<e.length;o++)n=n.replace(new RegExp(e[o],"g"),t[o]);else"string"==typeof e&&n.replace(new RegExp(e,"g"),t);return n},jQuery.fn.swap=function(e){e=jQuery(e)[0];var t=this[0].cloneNode(!0);return this[0]=t,this.pushStack(this)},function(e){e.fn.isInViewport=function(t){t=!!t;var n=e(window),o=e(this);if(!o&&t)return console.log("isOnScreen: element undefined."),!1;var i={top:n.scrollTop()||document.body.scrollTop||document.documentElement.scrollTop,left:n.scrollLeft()||document.body.scrollLeft||document.documentElement.scrollLeft};i.right=i.left+(n.width()||Math.max(document.body.scrollWidth,document.documentElement.scrollWidth,document.body.offsetWidth,document.documentElement.offsetWidth,document.body.clientWidth,document.documentElement.clientWidth)),i.bottom=i.top+(n.height()||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)),t&&console.log("Viewport have bounds, top: "+i.top+", left: "+i.left+", right: "+i.right+", bottom: "+i.bottom);var r={top:Math.round(o.offset().top),left:Math.round(o.offset().left)};r.right=Math.round(r.left+o.outerWidth()),r.bottom=Math.round(r.top+o.outerHeight()),t&&console.log("Element have bounds, top: "+r.top+", left: "+r.left+", right: "+r.right+", bottom: "+r.bottom);var s=!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom);return t&&console.log("Element in viewport: "+s),s}}(jQuery),jQuery.fn.viewport=function(){var e=window,t="inner";return"innerWidth"in window||(t="client",e=document.documentElement||document.body),{width:e[t+"Width"],height:e[t+"Height"]}},jQuery.fn.getStyle=function(e,t,n){var o=jQuery(e).css(t);return(n=!!n)&&console.log(t+": "+o),this.css(t,o)},jQuery.fn.isEmpty=function(){return!jQuery.trim(this.html())},jQuery.fn.id=function(){return this.attr("class")?"#"+jQuery.trim(this.attr("id")):null},jQuery.fn.class=function(){return this.attr("class")?"."+this.attr("class").replace(/\s/g,"."):null},jQuery.fn.size=function(){var e=jQuery(this).length;return e||0},function(){this.leadZero=function(e,t,n){var o;e=e||0,t=t||10,n=n||!1;return o=(parseInt(e)<parseInt(t)?"0":"")+e,n&&console.log("leadZero: "+o),o}}(),function(e){var t={groups:3,classname:".item",find_elem:".sub-item",min:1};e.fn.autoGroup=function(n,o){o=o||!1;var r=e.extend({},t,n);return this.each((function(){var t=e(this).find(r.find_elem),n=t.length;if(o&&console.log("autoGroup count: "+n),n>0){var s=Math.ceil(n/r.groups);s<r.min&&(s=r.min);var a=0,u=s;for(i=0;i<r.groups;i++)t.slice(a,u).wrapAll(i+1==r.groups?'<div class="'+r.classname+' last" />':'<div class="'+r.classname+'" />'),a+=s,u+=s}else o&&console.log("autoGroup: no have child elements for group.")}))}}(jQuery),jQuery.fn.nextOrFirst=function(e){var t=this.next(e);return t.length?t:this.prevAll(e).last()},jQuery.fn.prevOrLast=function(e){var t=this.prev(e);return t.length?t:this.nextAll(e).last()},function(e){e.fn.countUp=function(t,n){n=n||!1;var o=e.extend({},e.fn.countUp.defaults,t);return this.each((function(){var t=e(this),i=0,r=0,s=parseInt(t.text()),a=Math.ceil(o.time/o.interval),u=s/a;if(s>0){n&&console.log("countUp start of lops, count: "+a);var c=setInterval((function(){i<a?(r+=u,t.text(Math.round(r))):(clearInterval(c),t.text(s),n&&console.log("countUp end of lops, current: "+i)),i++}),o.interval)}else n&&console.log("countUp: element no have int value.")}))},e.fn.countUp.defaults={interval:100,time:3e3}}(jQuery),function(e){e.fn.countDown=function(t,n){n=n||!1;var o=e.extend({},e.fn.countDown.defaults,t);return this.each((function(){var t=e(this),i=0,r=0,s=parseInt(t.text()),a=Math.ceil(o.time/o.interval),u=s/a;if(s>0){n&&console.log("countDown start of lops, count: "+a),r=s;var c=setInterval((function(){i<a?(r-=u,t.text(Math.round(r))):(clearInterval(c),t.text(0),n&&console.log("countDown end of lops, current: "+i)),i++}),o.interval)}else n&&console.log("countDown: element no have int value.")}))},e.fn.countDown.defaults={interval:100,time:3e3}}(jQuery),function(){this.uniqID=function(e,t,n,o){var i;e=e||"",t=t||!1,n=n||!1,o=o||!1;return this.seed=function(e,t){return t<(e=parseInt(e,10).toString(16)).length?e.slice(e.length-t):t>e.length?new Array(t-e.length+1).join("0")+e:e},i=n?e+(String.fromCharCode(Math.floor(11*Math.random()))+Math.floor(1e6*Math.random())).trim():e+(this.seed(parseInt((new Date).getTime()/1e3,10),8)+this.seed(Math.floor(123456789*Math.random())+1,5)).trim(),t&&(i+=(10*Math.random()).toFixed(8).toString()),o&&console.log("uniqID: "+i),i}}(),function(e){e.fn.horizontalScroll=function(t,n){n=n||!1,t=t||120,e(this).bind("DOMMouseScroll mousewheel",(function(o){var i=o.originalEvent,r=i.detail?i.detail*-t:i.wheelDelta,s=e(this).scrollLeft();s+=r>0?-t:t,e(this).scrollLeft(s),n&&s==e(this).scrollLeft()+t||n&&s==-t||o.preventDefault()}))}}(jQuery),jQuery.fn.outerHtml=function(){return jQuery("<div />").append(jQuery(this).clone()).html()},function(e){function t(e,t){for(var n=[],o=e.firstChild;o;o=o.nextSibling)3==o.nodeType&&n.push(o.nodeValue);return n.join(t)}e.fn.textNotChild=function(n,o){return arguments.length<2&&(o=""),arguments.length<1&&(n=""),e.map(this,(function(e){return t(e,o)})).join(n)}}(jQuery),jQuery.fn.readingTime=function(e,t){var n,o=this[0],i=(e=jQuery(e)[0]||120,t=!!t,jQuery(o).text().toString().replace(/\r\n?|\n/g," ").replace(/ {2,}/g," ").replace(/^ /,"").replace(/ $/,"").split(" ").length),r=Math.floor(i/e),s=Math.floor(i%e/(e/60));return n=1<=r?r+" minute"+(1==r?"":"s")+", "+s+" second"+(1==s?"":"s"):r+" second"+(1==r?"":"s"),t&&console.log("readingTime() words: "+i+", reading by"+n),n};var declOfNum=function(){var e=[2,0,1,1,1,2],t=function(t,n){return t[(n=Math.abs(n))%100>4&&n%100<20?2:e[n%10<5?n%10:5]]};return function(e){return 1===arguments.length?function(n){return t(e,n)}:t.apply(null,arguments)}}();jQuery.fn.autoCurrying=function(e,t,n,o){var i=jQuery(this),r=e||!1,s=t||!1;return(o=!!o)&&console.log(r+" "+declOfNum(s,r)),onlyends?i.text(declOfNum(s,r)):i.text(r+" "+declOfNum(s,r))};var loadJSONP=function(){var e=0;return function(t,n,o){var i="_jsonp_"+e++;t.match(/\?/)?t+="&callback="+i:t+="?callback="+i;var r=document.createElement("script");r.type="text/javascript",r.src=t,window[i]=function(e){n.call(o||window,e),document.getElementsByTagName("head")[0].removeChild(r),r=null,delete window[i]},document.getElementsByTagName("head")[0].appendChild(r)}}();const fetchJSONP=(e=>t=>new Promise((n=>{const o=document.createElement("script"),i="_jsonp_"+e++;t.match(/\?/)?t+="&callback="+i:t+="?callback="+i,o.src=t,window[i]=e=>{n(new Response(JSON.stringify(e))),o.remove(),delete window[i]},document.body.appendChild(o)})))(0);function readCookie(e){var t,n,o=document.cookie.split("; "),i={};for(t=o.length-1;t>=0;t--)i[(n=o[t].split("="))[0]]=n[1];return i[e]}function locationHash(e){var t={};return window.location.href.replace(location.hash,"").replace(/[?&]+([^=&]+)=?([^&]*)?/gi,(function(e,n,o){t[n]=void 0!==o?o:""})),e?t[e]?t[e]:null:t}var matched,browser;function smoothScroll(){window.addEventListener&&window.addEventListener("DOMMouseScroll",t,!1),window.onmousewheel=document.onmousewheel=t;var e={sTop:0,sDelta:0};function t(t){var n=jQuery.browser.webkit?60:120;t.wheelDelta?delta=t.wheelDelta/120:t.detail&&(delta=-t.detail/3),e.sTop=jQuery(window).scrollTop(),e.sDelta=e.sDelta+delta*n,jQuery(e).stop().animate({sTop:jQuery(window).scrollTop()-e.sDelta,sDelta:0},{duration:200,easing:"linear",step:function(e,t){"sTop"==t.prop&&jQuery("html, body").scrollTop(e)}}),t.preventDefault&&t.preventDefault(),t.returnValue=!1}}jQuery.fn.checkSVG=function(){return void 0!==document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect?jQuery(this).removeClass("no-svg"):jQuery(this).addClass("no-svg")},jQuery.fn.checkFlexbox=function(){return"flexWrap"in document.documentElement.style||"WebkitFlexWrap"in document.documentElement.style||"msFlexWrap"in document.documentElement.style?jQuery(this).removeClass("no-flex"):jQuery(this).addClass("no-flex")},jQuery.fn.cloneItems=function(e,t,n){var o=jQuery(this);t=t||2,n=!!n;return o.find(e).each((function(){for(var e=$(this),n=1;n<t;n++)e.after($(this).clone())})),n&&console.log(o),o},jQuery.fn.splitClone=function(e,t,n){var o=jQuery(this);t=t||2,n=!!n;return o.find(e).each((function(){for(var e=$(this),n=1;n<t;n++)(e=e.next()).length||(e=$(this).siblings(":first")),e.children(":first-child").clone().appendTo($(this))})),n&&console.log(o),o},jQuery.fn.detectCollisions=function(e,t){var n=jQuery(this),o=jQuery(e),i=(t=!!t,{offsetX1:n.offset().left,offsetY1:n.offset().top,height1:n.outerHeight(!0),width1:n.outerWidth(!0),boundingBoxY1:n.offset().top+n.outerHeight(!0),boundingBoxX1:n.offset().left+n.outerWidth(!0),offsetX2:o.offset().left+1,offsetY2:o.offset().top+1,height2:o.outerHeight(!0),width2:o.outerWidth(!0),boundingBoxY2:o.offset().top+1+o.outerHeight(!0),boundingBoxX2:o.offset().left+1+o.outerWidth(!0)});return t&&console.log(i),!(i.boundingBoxY1<i.offsetY2||i.offsetX1>i.boundingBoxY2||i.boundingBoxX1<i.offsetX2||i.offsetX1>i.boundingBoxX2)},jQuery.fn.splitByWidth=function(e,t,n,o,i){var r=0,s=$(this),a=!!t&&$(t),u=(n=n||0,i=!!i,(o=!!o)?$(s).outerWidth(!0):$(s).width());return n&&(r=n),(i=!!i)&&o?console.log("Countainer outer width: "+u):i&&console.log("Countainer width: "+u),$(this).find(e).each((function(){var e=o?$(this).outerWidth(!0):$(this).width();(r+=e)>=u&&(a&&a.append($(this).outerHtml()),i&&console.log("Element out of container width and has been removed."),$(this).remove())})),i&&o?console.log("Summary outer width: "+r):i&&console.log("Summary width: "+r),this},jQuery.fn.splitByHeight=function(e,t,n,o,i){var r=0,s=$(this),a=!!t&&$(t),u=(n=n||0,i=!!i,(o=!!o)?$(s).outerHeight(!0):$(s).height());return n&&(r=n),(i=!!i)&&o?console.log("Countainer outer height: "+u):i&&console.log("Countainer height: "+u),$(this).find(e).each((function(){var e=o?$(this).outerHeight(!0):$(this).height();(r+=e)>=u&&(a&&a.append($(this).outerHtml()),i&&console.log("Element out of container height and has been removed."),$(this).remove())})),i&&o?console.log("Summary outer height: "+r):i&&console.log("Summary height: "+r),this},jQuery.fn.maxHeight=function(e,t){e=!!e,t=!!t;var n=0;return this.each((function(){if(e)var t=$(this).outerHeight();else t=$(this).height();t>n&&(n=t)})),t&&console.log("Max height of elements: "+n),n},jQuery.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},browser={},(matched=jQuery.uaMatch(navigator.userAgent)).browser&&(browser[matched.browser]=!0,browser.version=matched.version),browser.chrome?browser.webkit=!0:browser.webkit&&(browser.safari=!0),jQuery.browser=browser,function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],(function(o){return n(o,e,t),o.mobile})):n(e.jQuery,e,t)}(this,document,(function(e,t,n,o){
/*!
 * jQuery Mobile Virtual Mouse @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
var i;i=function(e){var t,i,r="virtualMouseBindings",s="virtualTouchID",a="clientX clientY pageX pageY screenX screenY".split(" "),u="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),c="altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),l=e.event.mouseHooks?e.event.mouseHooks.props:[],h=c.concat(l),d={},f=0,p=0,m=0,v=!1,g=[],w=!1,y=!1,b="addEventListener"in n,T=e(n),j=1,x=0;function Q(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function D(t){for(var n,o,i={};t;){for(o in n=e.data(t,r))n[o]&&(i[o]=i.hasVirtualBinding=!0);t=t.parentNode}return i}function E(){y=!0}function M(){x=0,g.length=0,w=!1,E()}function S(){y=!1}function k(){f&&(clearTimeout(f),f=0)}function I(){k(),f=setTimeout((function(){f=0,M()}),e.vmouse.resetTimerDuration)}function $(t,n,i){var s;return(i&&i[t]||!i&&function(t,n){for(var o;t;){if((o=e.data(t,r))&&(!n||o[n]))return t;t=t.parentNode}return null}(n.target,t))&&(s=function(t,n){var i,r,s,u,l,d,f,p,m,v=t.type;if((t=e.Event(t)).type=n,i=t.originalEvent,r=c,v.search(/^(mouse|click)/)>-1&&(r=h),i)for(f=r.length;f;)t[u=r[--f]]=i[u];if(v.search(/mouse(down|up)|click/)>-1&&!t.which&&(t.which=1),-1!==v.search(/^touch/)&&(v=(s=Q(i)).touches,l=s.changedTouches,d=v&&v.length?v[0]:l&&l.length?l[0]:o))for(p=0,m=a.length;p<m;p++)t[u=a[p]]=d[u];return t}(n,t),e(n.target).trigger(s)),s}function H(t){var n,o=e.data(t.target,s);"click"===t.type&&"touchstart"===e.data(t.target,"lastTouchType")&&setTimeout((function(){"touchstart"===e.data(t.target,"lastTouchType")&&(M(),delete e.data(t.target).lastTouchType,H(t))}),e.vmouse.maximumTimeBetweenTouches),w||x&&x===o||(n=$("v"+t.type,t))&&(n.isDefaultPrevented()&&t.preventDefault(),n.isPropagationStopped()&&t.stopPropagation(),n.isImmediatePropagationStopped()&&t.stopImmediatePropagation())}function X(t){var n,o,i,r=Q(t).touches;r&&1===r.length&&(o=D(n=t.target),e.data(t.target,"lastTouchType",t.type),o.hasVirtualBinding&&(x=j++,e.data(n,s,x),k(),S(),v=!1,i=Q(t).touches[0],p=i.pageX,m=i.pageY,$("vmouseover",t,o),$("vmousedown",t,o)))}function C(t){y||(v||$("vmousecancel",t,D(t.target)),e.data(t.target,"lastTouchType",t.type),v=!0,I())}function W(t){if(!y){var n=Q(t).touches[0],o=v,i=e.vmouse.moveDistanceThreshold,r=D(t.target);e.data(t.target,"lastTouchType",t.type),(v=v||Math.abs(n.pageX-p)>i||Math.abs(n.pageY-m)>i)&&!o&&$("vmousecancel",t,r),$("vmousemove",t,r),I()}}function Y(t){if(!y&&e.data(t.target,"lastTouchType")!==o){E(),delete e.data(t.target).lastTouchType;var n,i,r=D(t.target);$("vmouseup",t,r),v||(n=$("vclick",t,r))&&n.isDefaultPrevented()&&(i=Q(t).changedTouches[0],g.push({touchID:x,x:i.clientX,y:i.clientY}),w=!0),$("vmouseout",t,r),v=!1,I()}}function P(t){var n,o=e.data(t,r);if(o)for(n in o)if(o[n])return!0;return!1}function O(){}function B(t){var n=t.substr(1);return{setup:function(){P(this)||e.data(this,r,{}),e.data(this,r)[t]=!0,d[t]=(d[t]||0)+1,1===d[t]&&T.bind(n,H),e(this).bind(n,O),b&&(d.touchstart=(d.touchstart||0)+1,1===d.touchstart&&T.bind("touchstart",X).bind("touchend",Y).bind("touchmove",W).bind("scroll",C))},teardown:function(){--d[t],d[t]||T.unbind(n,H),b&&(--d.touchstart,d.touchstart||T.unbind("touchstart",X).unbind("touchmove",W).unbind("touchend",Y).unbind("scroll",C));var o=e(this),i=e.data(this,r);i&&(i[t]=!1),o.unbind(n,O),P(this)||o.removeData(r)}}}for(e.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500,maximumTimeBetweenTouches:100},i=0;i<u.length;i++)e.event.special[u[i]]=B(u[i]);b&&n.addEventListener("click",(function(n){var o,i,r,a,u,c=g.length,l=n.target;if(c)for(o=n.clientX,i=n.clientY,t=e.vmouse.clickDistanceThreshold,r=l;r;){for(a=0;a<c;a++)if(u=g[a],r===l&&Math.abs(u.x-o)<t&&Math.abs(u.y-i)<t||e.data(r,s)===u.touchID)return n.preventDefault(),void n.stopPropagation();r=r.parentNode}}),!0)},"function"==typeof define&&define.amd?define("vmouse",["jquery"],i):i(e),
/*!
 * jQuery Mobile Namespace @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("ns",["jquery"],t):t(e)}((function(e){return e.mobile={version:"@VERSION"},e.mobile})),
/*!
 * jQuery Mobile Touch Support Test @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("support/touch",["jquery","../ns"],t):t(e)}((function(e){var t={touch:"ontouchend"in n};return e.mobile.support=e.mobile.support||{},e.extend(e.support,t),e.extend(e.mobile.support,t),e.support})),
/*!
 * jQuery Mobile Touch Events @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("events/touch",["jquery","../vmouse","../support/touch"],t):t(e)}((function(e){var i=e(n),r=e.mobile.support.touch,s=r?"touchstart":"mousedown",a=r?"touchend":"mouseup",u=r?"touchmove":"mousemove";function c(t,n,i,r){var s=i.type;i.type=n,r?e.event.trigger(i,o,t):e.event.dispatch.call(t,i),i.type=s}return e.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight".split(" "),(function(t,n){e.fn[n]=function(e){return e?this.bind(n,e):this.trigger(n)},e.attrFn&&(e.attrFn[n]=!0)})),e.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var t=this,n=e(t),o=!1;n.bind("vmousedown",(function(r){if(o=!1,r.which&&1!==r.which)return!0;var s,a,u=r.target;function l(){s&&(n.bind("vclick",a),clearTimeout(s))}function h(){l(),n.unbind("vclick",a).unbind("vmouseup",l),i.unbind("vmousecancel",h)}a=function(e){h(),o||u!==e.target?o&&e.preventDefault():c(t,"tap",e)},n.bind("vmouseup",l),i.bind("vmousecancel",h),s=setTimeout((function(){e.event.special.tap.emitTapOnTaphold||(o=!0),s=0,c(t,"taphold",e.Event("taphold",{target:u}))}),e.event.special.tap.tapholdThreshold)}))},teardown:function(){e(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),i.unbind("vmousecancel")}},e.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:t.devicePixelRatio>=2?15:30,verticalDistanceThreshold:t.devicePixelRatio>=2?15:30,getLocation:function(e){var n=t.pageXOffset,o=t.pageYOffset,i=e.clientX,r=e.clientY;return 0===e.pageY&&Math.floor(r)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(i)>Math.floor(e.pageX)?(i-=n,r-=o):(r<e.pageY-o||i<e.pageX-n)&&(i=e.pageX-n,r=e.pageY-o),{x:i,y:r}},start:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,o=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[o.x,o.y],origin:e(t.target)}},stop:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,o=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[o.x,o.y]}},handleSwipe:function(t,n,o,i){if(n.time-t.time<e.event.special.swipe.durationThreshold&&Math.abs(t.coords[0]-n.coords[0])>e.event.special.swipe.horizontalDistanceThreshold&&Math.abs(t.coords[1]-n.coords[1])<e.event.special.swipe.verticalDistanceThreshold){var r=t.coords[0]>n.coords[0]?"swipeleft":"swiperight";return c(o,"swipe",e.Event("swipe",{target:i,swipestart:t,swipestop:n}),!0),c(o,r,e.Event(r,{target:i,swipestart:t,swipestop:n}),!0),!0}return!1},eventInProgress:!1,setup:function(){var t,n=this,o=e(n),r={};(t=e.data(this,"mobile-events"))||(t={length:0},e.data(this,"mobile-events",t)),t.length++,t.swipe=r,r.start=function(t){if(!e.event.special.swipe.eventInProgress){e.event.special.swipe.eventInProgress=!0;var o,s=e.event.special.swipe.start(t),c=t.target,l=!1;r.move=function(t){s&&!t.isDefaultPrevented()&&(o=e.event.special.swipe.stop(t),l||(l=e.event.special.swipe.handleSwipe(s,o,n,c))&&(e.event.special.swipe.eventInProgress=!1),Math.abs(s.coords[0]-o.coords[0])>e.event.special.swipe.scrollSupressionThreshold&&t.preventDefault())},r.stop=function(){l=!0,e.event.special.swipe.eventInProgress=!1,i.off(u,r.move),r.move=null},i.on(u,r.move).one(a,r.stop)}},o.on(s,r.start)},teardown:function(){var t,n;(t=e.data(this,"mobile-events"))&&(n=t.swipe,delete t.swipe,t.length--,0===t.length&&e.removeData(this,"mobile-events")),n&&(n.start&&e(this).off(s,n.start),n.move&&i.off(u,n.move),n.stop&&i.off(a,n.stop))}},e.each({taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},(function(t,n){e.event.special[t]={setup:function(){e(this).bind(n,e.noop)},teardown:function(){e(this).unbind(n)}}})),e.event.special}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci5qcyJdLCJuYW1lcyI6WyIkIiwiZm4iLCJwcmVMb2FkSW1hZ2VzIiwiY2IiLCJwcm9taXNlcyIsInRoaXMiLCJmaW5kIiwiZWFjaCIsInByb21pc2UiLCJEZWZlcnJlZCIsImltZyIsIkltYWdlIiwib25sb2FkIiwicmVzb2x2ZSIsInNyYyIsImF0dHIiLCJwdXNoIiwid2hlbiIsImFwcGx5IiwiZG9uZSIsImpRdWVyeSIsIlN0cmluZyIsInByb3RvdHlwZSIsInRyaW0iLCJyZXBsYWNlIiwicmVwbGFjZUFsbCIsInNlYXJjaCIsInN0cmluZyIsImkiLCJsZW5ndGgiLCJSZWdFeHAiLCJzd2FwIiwiYiIsImEyIiwiY2xvbmVOb2RlIiwicHVzaFN0YWNrIiwiaXNJblZpZXdwb3J0IiwiZGVidWciLCIkd2luZG93Iiwid2luZG93IiwiX3RoaXMiLCJjb25zb2xlIiwibG9nIiwidmlld3BvcnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJkb2N1bWVudCIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJNYXRoIiwibWF4Iiwic2Nyb2xsV2lkdGgiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwiYm90dG9tIiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiYm91bmRzIiwicm91bmQiLCJvZmZzZXQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJpbnZpZXdwb3J0IiwiZSIsImEiLCJnZXRTdHlsZSIsImVsZW0iLCJwcm9wIiwidmFsdWUiLCJjc3MiLCJpc0VtcHR5IiwiaHRtbCIsImlkIiwiY2xhc3MiLCJzaXplIiwibGVhZFplcm8iLCJudW1iZXIiLCJwZXJpb2QiLCJyZXN1bHQiLCJwYXJzZUludCIsImRlZmF1bHRzIiwiZ3JvdXBzIiwiY2xhc3NuYW1lIiwiZmluZF9lbGVtIiwibWluIiwiYXV0b0dyb3VwIiwiY3VzdG9tIiwib3B0aW9ucyIsImV4dGVuZCIsImVsZW1lbnRzIiwiY291bnQiLCJjZWlsIiwiY3VycmVudCIsInN0ZXAiLCJzbGljZSIsIndyYXBBbGwiLCJuZXh0T3JGaXJzdCIsInNlbGVjdG9yIiwibmV4dCIsInByZXZBbGwiLCJsYXN0IiwicHJldk9yTGFzdCIsInByZXYiLCJuZXh0QWxsIiwiY291bnRVcCIsImxvb3AiLCJ0ZXh0IiwibG9vcHMiLCJ0aW1lIiwiaW50ZXJ2YWwiLCJpbmNyZW1lbnQiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY291bnREb3duIiwidW5pcUlEIiwicHJlZml4IiwiZW50cm9weSIsIm51bWVyaWMiLCJzZWVkIiwicyIsInciLCJ0b1N0cmluZyIsIkFycmF5Iiwiam9pbiIsImZyb21DaGFyQ29kZSIsImZsb29yIiwicmFuZG9tIiwiRGF0ZSIsImdldFRpbWUiLCJ0b0ZpeGVkIiwiaG9yaXpvbnRhbFNjcm9sbCIsImFtb3VudCIsIm1peGluIiwiYmluZCIsImV2ZW50Iiwib0V2ZW50Iiwib3JpZ2luYWxFdmVudCIsImRpcmVjdGlvbiIsImRldGFpbCIsIndoZWVsRGVsdGEiLCJwb3NpdGlvbiIsInByZXZlbnREZWZhdWx0Iiwib3V0ZXJIdG1sIiwiYXBwZW5kIiwiY2xvbmUiLCJlbGVtZW50VGV4dCIsImVsIiwic2VwYXJhdG9yIiwidGV4dENvbnRlbnRzIiwiY2hsZCIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwidGV4dE5vdENoaWxkIiwiZWxlbWVudFNlcGFyYXRvciIsIm5vZGVTZXBhcmF0b3IiLCJhcmd1bWVudHMiLCJtYXAiLCJyZWFkaW5nVGltZSIsImVzdGltYXRlZF90aW1lIiwicG9zdCIsIndvcmRzIiwic3BsaXQiLCJtaW51dGVzIiwic2Vjb25kcyIsImRlY2xPZk51bSIsImNhc2VzIiwiZGVjbE9mTnVtU3ViRnVuY3Rpb24iLCJ0aXRsZXMiLCJhYnMiLCJfdGl0bGVzIiwiX251bWJlciIsImF1dG9DdXJyeWluZyIsIm9ubHlfZW5kcyIsIiRlbGVtIiwib25seWVuZHMiLCJsb2FkSlNPTlAiLCJ1bmlxdWUiLCJ1cmwiLCJjYWxsYmFjayIsImNvbnRleHQiLCJuYW1lIiwibWF0Y2giLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImRhdGEiLCJjYWxsIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiZmV0Y2hKU09OUCIsIlByb21pc2UiLCJycyIsImpzb24iLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW1vdmUiLCJyZWFkQ29va2llIiwiaW5keCIsImNvb2tpZSIsImNvb2tpZXMiLCJ2YXJzIiwibG9jYXRpb25IYXNoIiwicGFyYW0iLCJsb2NhdGlvbiIsImhyZWYiLCJoYXNoIiwibSIsImtleSIsInVuZGVmaW5lZCIsIm1hdGNoZWQiLCJicm93c2VyIiwic21vb3RoU2Nyb2xsIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndoZWVsIiwib25tb3VzZXdoZWVsIiwiaGIiLCJzVG9wIiwic0RlbHRhIiwiZGlzdGFuY2UiLCJ3ZWJraXQiLCJkZWx0YSIsInN0b3AiLCJhbmltYXRlIiwiZHVyYXRpb24iLCJlYXNpbmciLCJub3ciLCJleCIsInJldHVyblZhbHVlIiwiY2hlY2tTVkciLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVTVkdSZWN0IiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImNoZWNrRmxleGJveCIsInN0eWxlIiwiY2xvbmVJdGVtcyIsIm51bSIsIiRpdGVtIiwiYWZ0ZXIiLCJzcGxpdENsb25lIiwic2libGluZ3MiLCJjaGlsZHJlbiIsImFwcGVuZFRvIiwiZGV0ZWN0Q29sbGlzaW9ucyIsIiR0YXJnZXQiLCJjIiwib2Zmc2V0WDEiLCJvZmZzZXRZMSIsImhlaWdodDEiLCJ3aWR0aDEiLCJib3VuZGluZ0JveFkxIiwiYm91bmRpbmdCb3hYMSIsIm9mZnNldFgyIiwib2Zmc2V0WTIiLCJoZWlnaHQyIiwid2lkdGgyIiwiYm91bmRpbmdCb3hZMiIsImJvdW5kaW5nQm94WDIiLCJzcGxpdEJ5V2lkdGgiLCJkZXN0aW5hdGlvbiIsIm91dGVyIiwic3VtbWFyeVdpZHRoIiwiY29udGFpbmVyIiwiJGRlc3RpbmF0aW9uIiwiY291bnRhaW5lcldpZHRoIiwiZWxlbWVudFdpZHRoIiwic3BsaXRCeUhlaWdodCIsInN1bW1hcnlIZWlnaHQiLCJjb3VudGFpbmVySGVpZ2h0IiwiZWxlbWVudEhlaWdodCIsIm1heEhlaWdodCIsImlzb3V0ZXIiLCJibG9ja19oZWlnaHQiLCJ1YU1hdGNoIiwidWEiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJpbmRleE9mIiwidmVyc2lvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImNocm9tZSIsInNhZmFyaSIsInJvb3QiLCJkb2MiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwibW9iaWxlIiwidGhyZXNob2xkIiwiZGF0YVByb3BlcnR5TmFtZSIsInRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lIiwidG91Y2hFdmVudFByb3BzIiwidmlydHVhbEV2ZW50TmFtZXMiLCJnZW5lcmFsUHJvcHMiLCJtb3VzZUhvb2tQcm9wcyIsIm1vdXNlSG9va3MiLCJwcm9wcyIsIm1vdXNlRXZlbnRQcm9wcyIsImNvbmNhdCIsImFjdGl2ZURvY0hhbmRsZXJzIiwicmVzZXRUaW1lcklEIiwic3RhcnRYIiwic3RhcnRZIiwiZGlkU2Nyb2xsIiwiY2xpY2tCbG9ja0xpc3QiLCJibG9ja01vdXNlVHJpZ2dlcnMiLCJibG9ja1RvdWNoVHJpZ2dlcnMiLCJldmVudENhcHR1cmVTdXBwb3J0ZWQiLCIkZG9jdW1lbnQiLCJuZXh0VG91Y2hJRCIsImxhc3RUb3VjaElEIiwiZ2V0TmF0aXZlRXZlbnQiLCJnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzIiwiZWxlbWVudCIsImsiLCJmbGFncyIsImhhc1ZpcnR1YWxCaW5kaW5nIiwicGFyZW50Tm9kZSIsImRpc2FibGVUb3VjaEJpbmRpbmdzIiwiZW5hYmxlTW91c2VCaW5kaW5ncyIsImRpc2FibGVNb3VzZUJpbmRpbmdzIiwiY2xlYXJSZXNldFRpbWVyIiwiY2xlYXJUaW1lb3V0Iiwic3RhcnRSZXNldFRpbWVyIiwic2V0VGltZW91dCIsInZtb3VzZSIsInJlc2V0VGltZXJEdXJhdGlvbiIsInRyaWdnZXJWaXJ0dWFsRXZlbnQiLCJldmVudFR5cGUiLCJ2ZSIsImdldENsb3Nlc3RFbGVtZW50V2l0aFZpcnR1YWxCaW5kaW5nIiwidGFyZ2V0Iiwib2UiLCJuZSIsImN0IiwidG91Y2giLCJqIiwibGVuIiwidCIsIkV2ZW50Iiwid2hpY2giLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJjcmVhdGVWaXJ0dWFsRXZlbnQiLCJ0cmlnZ2VyIiwibW91c2VFdmVudENhbGxiYWNrIiwidG91Y2hJRCIsImxhc3RUb3VjaFR5cGUiLCJtYXhpbXVtVGltZUJldHdlZW5Ub3VjaGVzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImhhbmRsZVRvdWNoU3RhcnQiLCJwYWdlWCIsInBhZ2VZIiwiaGFuZGxlU2Nyb2xsIiwiaGFuZGxlVG91Y2hNb3ZlIiwiZGlkQ2FuY2VsIiwibW92ZVRocmVzaG9sZCIsIm1vdmVEaXN0YW5jZVRocmVzaG9sZCIsImhhbmRsZVRvdWNoRW5kIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImhhc1ZpcnR1YWxCaW5kaW5ncyIsImVsZSIsImJpbmRpbmdzIiwiZHVtbXlNb3VzZUhhbmRsZXIiLCJnZXRTcGVjaWFsRXZlbnRPYmplY3QiLCJyZWFsVHlwZSIsInN1YnN0ciIsInNldHVwIiwidGVhcmRvd24iLCJ1bmJpbmQiLCIkdGhpcyIsInJlbW92ZURhdGEiLCJjbGlja0Rpc3RhbmNlVGhyZXNob2xkIiwic3BlY2lhbCIsIm8iLCJjbnQiLCJzdXBwb3J0Iiwic3VwcG9ydFRvdWNoIiwidG91Y2hTdGFydEV2ZW50IiwidG91Y2hTdG9wRXZlbnQiLCJ0b3VjaE1vdmVFdmVudCIsInRyaWdnZXJDdXN0b21FdmVudCIsIm9iaiIsImJ1YmJsZSIsIm9yaWdpbmFsVHlwZSIsImRpc3BhdGNoIiwiYXR0ckZuIiwidGFwIiwidGFwaG9sZFRocmVzaG9sZCIsImVtaXRUYXBPblRhcGhvbGQiLCJ0aGlzT2JqZWN0IiwiaXNUYXBob2xkIiwidGltZXIiLCJjbGlja0hhbmRsZXIiLCJvcmlnVGFyZ2V0IiwiY2xlYXJUYXBUaW1lciIsImNsZWFyVGFwSGFuZGxlcnMiLCJzd2lwZSIsInNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQiLCJkdXJhdGlvblRocmVzaG9sZCIsImhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZCIsImRldmljZVBpeGVsUmF0aW8iLCJ2ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkIiwiZ2V0TG9jYXRpb24iLCJ3aW5QYWdlWCIsInBhZ2VYT2Zmc2V0Iiwid2luUGFnZVkiLCJwYWdlWU9mZnNldCIsInN0YXJ0IiwiY29vcmRzIiwib3JpZ2luIiwiaGFuZGxlU3dpcGUiLCJzd2lwZXN0YXJ0Iiwic3dpcGVzdG9wIiwiZXZlbnRJblByb2dyZXNzIiwiZXZlbnRzIiwiZW1pdHRlZCIsIm1vdmUiLCJvZmYiLCJvbiIsIm9uZSIsInRhcGhvbGQiLCJzd2lwZWxlZnQiLCJzd2lwZXJpZ2h0Iiwic291cmNlRXZlbnQiLCJub29wIl0sIm1hcHBpbmdzIjoiQ0FFQSxTQUFVQSxHQUNOQSxFQUFFQyxHQUFHQyxjQUFnQixTQUFTQyxHQUMxQixJQUFlQyxFQUFXLEdBQVlKLEVBQUVLLE1BQU1DLEtBQUssT0FDN0NDLE1BQUssV0FDUCxJQUFJQyxFQUFVUixFQUFFUyxXQUNaQyxFQUFNLElBQUlDLE1BQ2RELEVBQUlFLE9BQVMsV0FDVEosRUFBUUssUUFBUUgsRUFBSUksTUFFeEJKLEVBQUlJLElBQU1kLEVBQUVLLE1BQU1VLEtBQUssT0FDdkJYLEVBQVNZLEtBQUtSLE1BRWxCUixFQUFFaUIs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QUFVc1AsRUFBT2xCLGFBQ1ZrQixFQUFPbEIsTUFDZGtCLEVBQU9yWixTQUNnQixJQUFsQnFaLEVBQU9yWixRQUNYN0IsRUFBRXNZLFdBQVlqWSxLQUFNLGtCQUlqQnVMLElBQ0NBLEVBQVErTyxPQUNaM2EsRUFBR0ssTUFBT2diLElBQUt4QyxFQUFpQmpOLEVBQVErTyxPQUVwQy9PLEVBQVF3UCxNQUNacEgsRUFBVXFILElBQUt0QyxFQUFnQm5OLEVBQVF3UCxNQUVuQ3hQLEVBQVE0QyxNQUNad0YsRUFBVXFILElBQUt2QyxFQUFnQmxOLEVBQVE0QyxTQUszQ3hPLEVBQUVPLEtBQU0sQ0FDUGliLFFBQVMsTUFDVEMsVUFBVyxhQUNYQyxXQUFZLGdCQUNWLFNBQVU3UyxFQUFPOFMsR0FFbkIzYixFQUFFNkksTUFBTTJQLFFBQVMzUCxHQUFVLENBQzFCcVAsTUFBTyxXQUNObFksRUFBR0ssTUFBT3VJLEtBQU0rUyxFQUFhM2IsRUFBRTRiLE9BRWhDekQsU0FBVSxXQUNUblksRUFBR0ssTUFBTytYLE9BQVF1RCxRQUtkM2IsRUFBRTZJLE1BQU0yUCIsImZpbGUiOiJoZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBIZWxwZXIuanMgdjEuNy4xICovXG5cbihmdW5jdGlvbigkKSB7XG4gICAgJC5mbi5wcmVMb2FkSW1hZ2VzID0gZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgdmFyIHVybHMgPSBbXSwgcHJvbWlzZXMgPSBbXSwgJGltZ3MgPSAkKHRoaXMpLmZpbmQoJ2ltZycpO1xuICAgICAgICAkaW1ncy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShpbWcuc3JjKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWcuc3JjID0gJCh0aGlzKS5hdHRyKCdzcmMnKTtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAkLndoZW4uYXBwbHkobnVsbCwgcHJvbWlzZXMpLmRvbmUoY2IpO1xuICAgIH1cbn0pKGpRdWVyeSk7XG5cblN0cmluZy5wcm90b3R5cGUudHJpbSA9IFN0cmluZy5wcm90b3R5cGUudHJpbSB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzKy8sICcnKS5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbn07XG5cblN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uKHNlYXJjaCwgcmVwbGFjZSkge1xuXHR2YXIgc3RyaW5nID0gdGhpczsgIFxuXHRpZiAodHlwZW9mIHNlYXJjaCA9PT0gXCJvYmplY3RcIikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHNlYXJjaFtpXSwgXCJnXCIpLCByZXBsYWNlW2ldKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIHNlYXJjaCA9PT0gXCJzdHJpbmdcIikge1xuXHRcdHN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAoc2VhcmNoLCAnZycpLCByZXBsYWNlKTtcblx0fVxuXHRyZXR1cm4gc3RyaW5nO1xufTtcblxualF1ZXJ5LmZuLnN3YXAgPSBmdW5jdGlvbihiKSB7XG4gICAgYiA9IGpRdWVyeShiKVswXTtcbiAgICB2YXIgYSA9IHRoaXNbMF0sXG4gICAgICAgIGEyID0gYS5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICAgIHN0YWNrID0gdGhpcztcblxuICAgIHN0YWNrWzBdID0gYTI7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzdGFjayApO1xufTtcblxuKGZ1bmN0aW9uKCQpIHtcblx0JC5mbi5pc0luVmlld3BvcnQgPSBmdW5jdGlvbihkZWJ1Zykge1xuXHRcdHZhciBkZWJ1ZyA9IChkZWJ1ZykgPyB0cnVlIDogZmFsc2U7XG5cdFx0dmFyICR3aW5kb3cgPSAkKHdpbmRvdyk7XG5cblx0XHR2YXIgX3RoaXMgPSAkKHRoaXMpO1xuXHRcdGlmKCFfdGhpcyAmJiBkZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coJ2lzT25TY3JlZW46IGVsZW1lbnQgdW5kZWZpbmVkLicpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXG5cdFx0dmFyIHZpZXdwb3J0ID0ge1xuXHRcdFx0dG9wOiAoJHdpbmRvdy5zY3JvbGxUb3AoKSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxcblx0XHRcdGxlZnQ6ICgkd2luZG93LnNjcm9sbExlZnQoKSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpXG5cdFx0fTtcblx0XHR2aWV3cG9ydC5yaWdodCA9IHZpZXdwb3J0LmxlZnQgKyAoJHdpbmRvdy53aWR0aCgpIHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGgsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCwgZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLCBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpKTtcblx0XHR2aWV3cG9ydC5ib3R0b20gPSB2aWV3cG9ydC50b3AgKyAoJHdpbmRvdy5oZWlnaHQoKSB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQsIGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSk7XG5cblx0XHRpZihkZWJ1Zylcblx0XHRcdGNvbnNvbGUubG9nKCdWaWV3cG9ydCBoYXZlIGJvdW5kcywgdG9wOiAnK3ZpZXdwb3J0LnRvcCsnLCBsZWZ0OiAnK3ZpZXdwb3J0LmxlZnQrJywgcmlnaHQ6ICcrdmlld3BvcnQucmlnaHQrJywgYm90dG9tOiAnK3ZpZXdwb3J0LmJvdHRvbSk7XG5cblx0XHR2YXIgYm91bmRzID0ge1xuXHRcdFx0dG9wOiBNYXRoLnJvdW5kKF90aGlzLm9mZnNldCgpLnRvcCksXG5cdFx0XHRsZWZ0OiBNYXRoLnJvdW5kKF90aGlzLm9mZnNldCgpLmxlZnQpLFxuXHRcdH07XG5cdFx0Ym91bmRzLnJpZ2h0ID0gTWF0aC5yb3VuZChib3VuZHMubGVmdCArIF90aGlzLm91dGVyV2lkdGgoKSk7XG5cdFx0Ym91bmRzLmJvdHRvbSA9IE1hdGgucm91bmQoYm91bmRzLnRvcCArIF90aGlzLm91dGVySGVpZ2h0KCkpO1xuXG5cdFx0aWYoZGVidWcpXG5cdFx0XHRjb25zb2xlLmxvZygnRWxlbWVudCBoYXZlIGJvdW5kcywgdG9wOiAnK2JvdW5kcy50b3ArJywgbGVmdDogJytib3VuZHMubGVmdCsnLCByaWdodDogJytib3VuZHMucmlnaHQrJywgYm90dG9tOiAnK2JvdW5kcy5ib3R0b20pO1xuXG5cdFx0dmFyIGludmlld3BvcnQgPSAhKHZpZXdwb3J0LnJpZ2h0IDwgYm91bmRzLmxlZnQgfHwgdmlld3BvcnQubGVmdCA+IGJvdW5kcy5yaWdodCB8fCB2aWV3cG9ydC5ib3R0b20gPCBib3VuZHMudG9wIHx8IHZpZXdwb3J0LnRvcCA+IGJvdW5kcy5ib3R0b20pO1xuXG5cdFx0aWYoZGVidWcpXG5cdFx0XHRjb25zb2xlLmxvZygnRWxlbWVudCBpbiB2aWV3cG9ydDogJytpbnZpZXdwb3J0KTtcblxuXHRcdHJldHVybiBpbnZpZXdwb3J0O1xuXHR9XG59KShqUXVlcnkpO1xuXG5qUXVlcnkuZm4udmlld3BvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IHdpbmRvdywgYSA9ICdpbm5lcic7XG4gICAgaWYgKCEoJ2lubmVyV2lkdGgnIGluIHdpbmRvdykpIHtcbiAgICAgICAgYSA9ICdjbGllbnQnO1xuICAgICAgICBlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuICAgIHJldHVybiB7XG5cdFx0d2lkdGg6IGVbYSsnV2lkdGgnXSxcblx0XHRoZWlnaHQ6IGVbYSsnSGVpZ2h0J11cblx0fTtcbn1cblxualF1ZXJ5LmZuLmdldFN0eWxlID0gZnVuY3Rpb24oZWxlbSwgcHJvcCwgZGVidWcpIHtcblx0dmFyIHZhbHVlID0galF1ZXJ5KGVsZW0pLmNzcyhwcm9wKTtcblx0dmFyIGRlYnVnID0gKGRlYnVnKSA/IHRydWUgOiBmYWxzZTtcblxuXHRpZihkZWJ1Zylcblx0XHRjb25zb2xlLmxvZyhwcm9wKyc6ICcrdmFsdWUpO1xuXG4gICAgcmV0dXJuIHRoaXMuY3NzKHByb3AsIHZhbHVlKTtcbn07XG5cbmpRdWVyeS5mbi5pc0VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICFqUXVlcnkudHJpbSh0aGlzLmh0bWwoKSk7XG59O1xuXG5qUXVlcnkuZm4uaWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZih0aGlzLmF0dHIoJ2NsYXNzJykpXG4gICAgICAgIHJldHVybiBcIiNcIitqUXVlcnkudHJpbSh0aGlzLmF0dHIoJ2lkJykpO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIG51bGw7XG59O1xuXG5qUXVlcnkuZm4uY2xhc3MgPSBmdW5jdGlvbigpIHtcbiAgICBpZih0aGlzLmF0dHIoJ2NsYXNzJykpXG4gICAgICAgIHJldHVybiBcIi5cIit0aGlzLmF0dHIoJ2NsYXNzJykucmVwbGFjZSgvXFxzL2csIFwiLlwiKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBudWxsO1xufTtcblxualF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0galF1ZXJ5KHRoaXMpLmxlbmd0aDtcblx0aWYgKGxlbmd0aClcbiAgICBcdHJldHVybiBsZW5ndGg7XG5cdGVsc2Vcblx0XHRyZXR1cm4gMDtcbn07XG5cbihmdW5jdGlvbigpIHtcblx0dGhpcy5sZWFkWmVybyA9IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCwgZGVidWcpIHtcblx0XHR2YXIgbnVtYmVyID0gbnVtYmVyIHx8IDAsXG5cdFx0XHRwZXJpb2QgPSBwZXJpb2QgfHwgMTAsXG5cdFx0XHRkZWJ1ZyA9IGRlYnVnIHx8IGZhbHNlLFxuXHRcdFx0cmVzdWx0O1xuXG5cdFx0cmVzdWx0ID0gKHBhcnNlSW50KG51bWJlcikgPCBwYXJzZUludChwZXJpb2QpID8gJzAnIDogJycpICsgbnVtYmVyO1xuXG5cdFx0aWYoZGVidWcpXG5cdFx0XHRjb25zb2xlLmxvZygnbGVhZFplcm86ICcrcmVzdWx0KTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG59KSgpO1xuXG4oZnVuY3Rpb24oJCkge1xuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0Z3JvdXBzOiAzLFxuXHRcdGNsYXNzbmFtZTogXCIuaXRlbVwiLFxuXHRcdGZpbmRfZWxlbTogXCIuc3ViLWl0ZW1cIixcblx0XHRtaW46IDFcblx0fTtcblx0JC5mbi5hdXRvR3JvdXAgPSBmdW5jdGlvbiAoY3VzdG9tLCBkZWJ1Zykge1xuXHRcdHZhciBkZWJ1ZyA9IGRlYnVnIHx8IGZhbHNlO1xuXHRcdHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBjdXN0b20pO1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gJCh0aGlzKS5maW5kKG9wdGlvbnMuZmluZF9lbGVtKTtcblx0XHRcdHZhciBjb3VudCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRcdFx0aWYoZGVidWcpXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdhdXRvR3JvdXAgY291bnQ6ICcrY291bnQpO1xuXG5cdFx0XHRpZiAoY291bnQgPiAwKSB7XG5cdFx0XHRcdHZhciBtaW4gPSBNYXRoLmNlaWwoY291bnQgLyBvcHRpb25zLmdyb3Vwcyk7XG5cdFx0XHRcdG1pbiA8IG9wdGlvbnMubWluICYmIChtaW4gPSBvcHRpb25zLm1pbik7XG5cblx0XHRcdFx0dmFyIGN1cnJlbnQgPSAwO1xuXHRcdFx0XHR2YXIgc3RlcCA9IG1pbjtcblxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5ncm91cHM7IGkrKykge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnNsaWNlKGN1cnJlbnQsIHN0ZXApLndyYXBBbGwoaSArIDEgPT0gb3B0aW9ucy5ncm91cHMgPyAnPGRpdiBjbGFzcz1cIicgKyBvcHRpb25zLmNsYXNzbmFtZSArICcgbGFzdFwiIC8+JyA6ICc8ZGl2IGNsYXNzPVwiJyArIG9wdGlvbnMuY2xhc3NuYW1lICsgJ1wiIC8+Jyk7XG5cdFx0XHRcdFx0Y3VycmVudCArPSBtaW47XG5cdFx0XHRcdFx0c3RlcCArPSBtaW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZihkZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnYXV0b0dyb3VwOiBubyBoYXZlIGNoaWxkIGVsZW1lbnRzIGZvciBncm91cC4nKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcbn0pKGpRdWVyeSk7XG5cbmpRdWVyeS5mbi5uZXh0T3JGaXJzdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICB2YXIgbmV4dCA9IHRoaXMubmV4dChzZWxlY3Rvcik7XG4gICAgcmV0dXJuIChuZXh0Lmxlbmd0aCkgPyBuZXh0IDogdGhpcy5wcmV2QWxsKHNlbGVjdG9yKS5sYXN0KCk7XG59O1xuXG5qUXVlcnkuZm4ucHJldk9yTGFzdCA9IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICB2YXIgcHJldiA9IHRoaXMucHJldihzZWxlY3Rvcik7XG4gICAgcmV0dXJuIChwcmV2Lmxlbmd0aCkgPyBwcmV2IDogdGhpcy5uZXh0QWxsKHNlbGVjdG9yKS5sYXN0KCk7XG59O1xuXG4oZnVuY3Rpb24oJCkge1xuXHQkLmZuLmNvdW50VXAgPSBmdW5jdGlvbihjdXN0b20sIGRlYnVnKSB7XG5cdFx0dmFyIGRlYnVnID0gZGVidWcgfHwgZmFsc2U7XG5cdFx0dmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5jb3VudFVwLmRlZmF1bHRzLCBjdXN0b20pO1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIF90aGlzID0gJCh0aGlzKTtcblx0XHRcdHZhciBsb29wID0gMCxcblx0XHRcdFx0Y3VycmVudCA9IDAsXG5cdFx0XHRcdHZhbHVlID0gcGFyc2VJbnQoX3RoaXMudGV4dCgpKSxcblx0XHRcdFx0bG9vcHMgPSBNYXRoLmNlaWwob3B0aW9ucy50aW1lIC8gb3B0aW9ucy5pbnRlcnZhbCksXG5cdFx0XHRcdGluY3JlbWVudCA9IHZhbHVlIC8gbG9vcHM7XG5cblx0XHRcdGlmKHZhbHVlID4gMCkge1xuXHRcdFx0XHRpZihkZWJ1Zylcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnY291bnRVcCBzdGFydCBvZiBsb3BzLCBjb3VudDogJytsb29wcyk7XG5cblx0XHRcdFx0dmFyIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAobG9vcCA8IGxvb3BzKSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50ICs9IGluY3JlbWVudDtcblx0XHRcdFx0XHRcdF90aGlzLnRleHQoTWF0aC5yb3VuZChjdXJyZW50KSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG5cdFx0XHRcdFx0XHRfdGhpcy50ZXh0KHZhbHVlKTtcblxuXHRcdFx0XHRcdFx0aWYoZGVidWcpXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdjb3VudFVwIGVuZCBvZiBsb3BzLCBjdXJyZW50OiAnK2xvb3ApO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxvb3ArKztcblx0XHRcdFx0fSwgb3B0aW9ucy5pbnRlcnZhbCk7XG5cdFx0XHR9IGVsc2UgaWYoZGVidWcpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2NvdW50VXA6IGVsZW1lbnQgbm8gaGF2ZSBpbnQgdmFsdWUuJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdCQuZm4uY291bnRVcC5kZWZhdWx0cyA9IHtcblx0XHRpbnRlcnZhbDogMTAwLFxuXHRcdHRpbWU6IDMwMDBcblx0fTtcbn0pKGpRdWVyeSk7XG5cbihmdW5jdGlvbigkKSB7XG5cdCQuZm4uY291bnREb3duID0gZnVuY3Rpb24oY3VzdG9tLCBkZWJ1Zykge1xuXHRcdHZhciBkZWJ1ZyA9IGRlYnVnIHx8IGZhbHNlO1xuXHRcdHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4uY291bnREb3duLmRlZmF1bHRzLCBjdXN0b20pO1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIF90aGlzID0gJCh0aGlzKTtcblx0XHRcdHZhciBsb29wID0gMCxcblx0XHRcdFx0Y3VycmVudCA9IDAsXG5cdFx0XHRcdHZhbHVlID0gcGFyc2VJbnQoX3RoaXMudGV4dCgpKSxcblx0XHRcdFx0bG9vcHMgPSBNYXRoLmNlaWwob3B0aW9ucy50aW1lIC8gb3B0aW9ucy5pbnRlcnZhbCksXG5cdFx0XHRcdGluY3JlbWVudCA9IHZhbHVlIC8gbG9vcHM7XG5cblx0XHRcdGlmKHZhbHVlID4gMCkge1xuXHRcdFx0XHRpZihkZWJ1Zylcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnY291bnREb3duIHN0YXJ0IG9mIGxvcHMsIGNvdW50OiAnK2xvb3BzKTtcblxuXHRcdFx0XHRjdXJyZW50ID0gdmFsdWU7XG5cblx0XHRcdFx0dmFyIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAobG9vcCA8IGxvb3BzKSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50IC09IGluY3JlbWVudDtcblx0XHRcdFx0XHRcdF90aGlzLnRleHQoTWF0aC5yb3VuZChjdXJyZW50KSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG5cdFx0XHRcdFx0XHRfdGhpcy50ZXh0KDApO1xuXG5cdFx0XHRcdFx0XHRpZihkZWJ1Zylcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ2NvdW50RG93biBlbmQgb2YgbG9wcywgY3VycmVudDogJytsb29wKTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsb29wKys7XG5cdFx0XHRcdH0sIG9wdGlvbnMuaW50ZXJ2YWwpO1xuXHRcdFx0fSBlbHNlIGlmKGRlYnVnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdjb3VudERvd246IGVsZW1lbnQgbm8gaGF2ZSBpbnQgdmFsdWUuJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdCQuZm4uY291bnREb3duLmRlZmF1bHRzID0ge1xuXHRcdGludGVydmFsOiAxMDAsXG5cdFx0dGltZTogMzAwMFxuXHR9O1xufSkoalF1ZXJ5KTtcblxuKGZ1bmN0aW9uKCkge1xuXHR0aGlzLnVuaXFJRCA9IGZ1bmN0aW9uIChwcmVmaXgsIGVudHJvcHksIG51bWVyaWMsIGRlYnVnKSB7XG5cdFx0dmFyIHByZWZpeCA9IHByZWZpeCB8fCAnJyxcblx0XHRcdGVudHJvcHkgPSBlbnRyb3B5IHx8IGZhbHNlLFxuXHRcdFx0bnVtZXJpYyA9IG51bWVyaWMgfHwgZmFsc2UsXG5cdFx0XHRkZWJ1ZyA9IGRlYnVnIHx8IGZhbHNlLFxuXHRcdFx0cmVzdWx0O1xuXG5cdFx0dGhpcy5zZWVkID0gZnVuY3Rpb24gKHMsIHcpIHtcblx0XHRcdHMgPSBwYXJzZUludChzLCAxMCkudG9TdHJpbmcoMTYpO1xuXHRcdFx0cmV0dXJuIHcgPCBzLmxlbmd0aCA/IHMuc2xpY2Uocy5sZW5ndGggLSB3KSA6XG5cdFx0XHQodyA+IHMubGVuZ3RoKSA/IG5ldyBBcnJheSgxICsgKHcgLSBzLmxlbmd0aCkpLmpvaW4oJzAnKSArIHMgOiBzO1xuXHRcdH07XG5cblx0XHRpZihudW1lcmljKVxuXHRcdFx0cmVzdWx0ID0gcHJlZml4ICsgKFN0cmluZy5mcm9tQ2hhckNvZGUoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTEpKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApKS50cmltKCk7XG5cdFx0ZWxzZVxuXHRcdFx0cmVzdWx0ID0gcHJlZml4ICsgKHRoaXMuc2VlZChwYXJzZUludCgobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSwgMTApLCA4KSArIHRoaXMuc2VlZChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDc1YmNkMTUpICsgMSwgNSkpLnRyaW0oKTtcblxuXHRcdGlmIChlbnRyb3B5KVxuXHRcdFx0cmVzdWx0ICs9IChNYXRoLnJhbmRvbSgpICogMTApLnRvRml4ZWQoOCkudG9TdHJpbmcoKTtcblxuXHRcdGlmKGRlYnVnKVxuXHRcdFx0Y29uc29sZS5sb2coJ3VuaXFJRDogJytyZXN1bHQpO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcbn0pKCk7XG5cbihmdW5jdGlvbigkKSB7XG5cdCQuZm4uaG9yaXpvbnRhbFNjcm9sbCA9IGZ1bmN0aW9uIChhbW91bnQsIG1peGluKSB7XG5cdFx0bWl4aW4gPSBtaXhpbiB8fCBmYWxzZTtcblx0XHRhbW91bnQgPSBhbW91bnQgfHwgMTIwO1xuXHRcdCQodGhpcykuYmluZChcIkRPTU1vdXNlU2Nyb2xsIG1vdXNld2hlZWxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHR2YXIgb0V2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCxcblx0XHRcdFx0ZGlyZWN0aW9uID0gb0V2ZW50LmRldGFpbCA/IG9FdmVudC5kZXRhaWwgKiAtYW1vdW50IDogb0V2ZW50LndoZWVsRGVsdGEsXG5cdFx0XHRcdHBvc2l0aW9uID0gJCh0aGlzKS5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwb3NpdGlvbiArPSBkaXJlY3Rpb24gPiAwID8gLWFtb3VudCA6IGFtb3VudDtcblx0XHRcdCQodGhpcykuc2Nyb2xsTGVmdChwb3NpdGlvbik7XG5cblx0XHRcdGlmKG1peGluICYmIHBvc2l0aW9uID09ICgkKHRoaXMpLnNjcm9sbExlZnQoKSArIGFtb3VudCkpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGVsc2UgaWYobWl4aW4gJiYgcG9zaXRpb24gPT0gLShhbW91bnQpKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fSk7XG5cdH1cbn0pKGpRdWVyeSk7XG5cbmpRdWVyeS5mbi5vdXRlckh0bWwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4galF1ZXJ5KCc8ZGl2IC8+JykuYXBwZW5kKGpRdWVyeSh0aGlzKS5jbG9uZSgpKS5odG1sKCk7XG59O1xuXG4oZnVuY3Rpb24oJCkge1xuXHRmdW5jdGlvbiBlbGVtZW50VGV4dChlbCwgc2VwYXJhdG9yKSB7XG5cdFx0dmFyIHRleHRDb250ZW50cyA9IFtdO1xuXHRcdGZvciAodmFyIGNobGQgPSBlbC5maXJzdENoaWxkOyBjaGxkOyBjaGxkID0gY2hsZC5uZXh0U2libGluZykge1xuXG5cdFx0XHRpZiAoY2hsZC5ub2RlVHlwZSA9PSAzKVxuXHRcdFx0XHR0ZXh0Q29udGVudHMucHVzaChjaGxkLm5vZGVWYWx1ZSk7XG5cblx0XHR9XG5cdFx0cmV0dXJuIHRleHRDb250ZW50cy5qb2luKHNlcGFyYXRvcik7XG5cdH1cblx0JC5mbi50ZXh0Tm90Q2hpbGQgPSBmdW5jdGlvbihlbGVtZW50U2VwYXJhdG9yLCBub2RlU2VwYXJhdG9yKSB7XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpXG5cdFx0XHRub2RlU2VwYXJhdG9yID0gXCJcIjtcblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSlcblx0XHRcdGVsZW1lbnRTZXBhcmF0b3IgPSBcIlwiO1xuXG5cdFx0cmV0dXJuICQubWFwKHRoaXMsIGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudFRleHQoZWwsIG5vZGVTZXBhcmF0b3IpO1xuXHRcdH0pLmpvaW4oZWxlbWVudFNlcGFyYXRvcik7XG5cdH1cbn0pKGpRdWVyeSk7XG5cbmpRdWVyeS5mbi5yZWFkaW5nVGltZSA9IGZ1bmN0aW9uKGFtb3VudCwgZGVidWcpIHtcbiAgICB2YXIgcG9zdCA9IHRoaXNbMF0sXG5cdFx0YW1vdW50ID0galF1ZXJ5KGFtb3VudClbMF0gfHwgMTIwLFxuXHRcdGRlYnVnID0gKGRlYnVnKSA/IHRydWUgOiBmYWxzZSxcblx0XHRlc3RpbWF0ZWRfdGltZTtcblxuXHRcdHZhciB3b3JkcyA9IGpRdWVyeShwb3N0KS50ZXh0KCkudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHJcXG4/fFxcbi9nLCAnICcpLnJlcGxhY2UoLyB7Mix9L2csICcgJykucmVwbGFjZSgvXiAvLCAnJykucmVwbGFjZSgvICQvLCAnJykuc3BsaXQoJyAnKS5sZW5ndGg7XG5cdFx0dmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHdvcmRzIC8gYW1vdW50KTtcblx0XHR2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3Iod29yZHMgJSBhbW91bnQgLyAoYW1vdW50IC8gNjApKTtcblxuXHRcdGlmICgxIDw9IG1pbnV0ZXMpXG5cdFx0XHRlc3RpbWF0ZWRfdGltZSA9IG1pbnV0ZXMgKyAnIG1pbnV0ZScgKyAobWludXRlcyA9PSAxID8gJycgOiAncycpICsgJywgJyArIHNlY29uZHMgKyAnIHNlY29uZCcgKyAoc2Vjb25kcyA9PSAxID8gJycgOiAncycpO1xuXHRcdGVsc2Vcblx0XHRcdGVzdGltYXRlZF90aW1lID0gbWludXRlcyArICcgc2Vjb25kJyArIChtaW51dGVzID09IDEgPyAnJyA6ICdzJyk7XG5cblx0XHRpZihkZWJ1Zylcblx0XHRcdGNvbnNvbGUubG9nKCdyZWFkaW5nVGltZSgpIHdvcmRzOiAnICsgd29yZHMgKyAnLCByZWFkaW5nIGJ5JyArIGVzdGltYXRlZF90aW1lKTtcblxuXHRcdHJldHVybiBlc3RpbWF0ZWRfdGltZTtcbn07XG5cbnZhciBkZWNsT2ZOdW0gPSAoZnVuY3Rpb24oKSB7XG5cdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JlYWxteXN0LzEyNjI1NjFcbiAgICB2YXIgY2FzZXMgPSBbMiwgMCwgMSwgMSwgMSwgMl07XG4gICAgdmFyIGRlY2xPZk51bVN1YkZ1bmN0aW9uID0gZnVuY3Rpb24odGl0bGVzLCBudW1iZXIpIHtcbiAgICAgICAgbnVtYmVyID0gTWF0aC5hYnMobnVtYmVyKTtcbiAgICAgICAgcmV0dXJuIHRpdGxlc1sgKG51bWJlciUxMDA+NCAmJiBudW1iZXIlMTAwPDIwKT8gMiA6IGNhc2VzWyhudW1iZXIlMTA8NSk/bnVtYmVyJTEwOjVdIF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihfdGl0bGVzKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oX251bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNsT2ZOdW1TdWJGdW5jdGlvbihfdGl0bGVzLCBfbnVtYmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlY2xPZk51bVN1YkZ1bmN0aW9uLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbmpRdWVyeS5mbi5hdXRvQ3VycnlpbmcgPSBmdW5jdGlvbihudW1iZXIsIHRpdGxlcywgb25seV9lbmRzLCBkZWJ1Zykge1xuXHR2YXIgJGVsZW0gPSBqUXVlcnkodGhpcyksXG5cdFx0X251bWJlciA9IChudW1iZXIpID8gbnVtYmVyIDogZmFsc2UsXG5cdFx0X3RpdGxlcyA9ICh0aXRsZXMpID8gdGl0bGVzIDogZmFsc2UsXG5cdFx0b25seV9lbmRzID0gKG9ubHlfZW5kcykgPyB0cnVlIDogZmFsc2UsXG5cdFx0ZGVidWcgPSAoZGVidWcpID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdGlmKGRlYnVnKVxuXHRcdGNvbnNvbGUubG9nKF9udW1iZXIgKycgJysgIGRlY2xPZk51bShfdGl0bGVzLCBfbnVtYmVyKSk7XG5cblx0aWYob25seWVuZHMpXG4gICAgXHRyZXR1cm4gJGVsZW0udGV4dChkZWNsT2ZOdW0oX3RpdGxlcywgX251bWJlcikpO1xuXHRlbHNlXG4gICAgXHRyZXR1cm4gJGVsZW0udGV4dChfbnVtYmVyICsnICcrICBkZWNsT2ZOdW0oX3RpdGxlcywgX251bWJlcikpO1xuXG59O1xuXG52YXIgbG9hZEpTT05QID0gKGZ1bmN0aW9uKCl7XG5cdHZhciB1bmlxdWUgPSAwO1xuXHRyZXR1cm4gZnVuY3Rpb24odXJsLCBjYWxsYmFjaywgY29udGV4dCkge1xuXG5cdFx0dmFyIG5hbWUgPSBcIl9qc29ucF9cIiArIHVuaXF1ZSsrO1xuXG5cdFx0aWYgKHVybC5tYXRjaCgvXFw/LykpXG5cdFx0XHR1cmwgKz0gXCImY2FsbGJhY2s9XCIrbmFtZTtcblx0XHRlbHNlXG5cdFx0XHR1cmwgKz0gXCI/Y2FsbGJhY2s9XCIrbmFtZTtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cblx0XHR3aW5kb3dbbmFtZV0gPSBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRjYWxsYmFjay5jYWxsKChjb250ZXh0IHx8IHdpbmRvdyksIGRhdGEpO1xuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdFx0c2NyaXB0ID0gbnVsbDtcblx0XHRcdGRlbGV0ZSB3aW5kb3dbbmFtZV07XG5cdFx0fTtcblxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0fTtcbn0pKCk7XG5cbmNvbnN0IGZldGNoSlNPTlAgPSAodW5pcXVlID0+IHVybCA9PlxuXHRuZXcgUHJvbWlzZShycyA9PiB7XG5cdFx0Y29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0Y29uc3QgbmFtZSA9IGBfanNvbnBfJHt1bmlxdWUrK31gO1xuXG5cdFx0aWYgKHVybC5tYXRjaCgvXFw/LykpIHtcblx0XHRcdHVybCArPSBgJmNhbGxiYWNrPSR7bmFtZX1gO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR1cmwgKz0gYD9jYWxsYmFjaz0ke25hbWV9YDtcblx0XHR9XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHRcdHdpbmRvd1tuYW1lXSA9IGpzb24gPT4ge1xuXHRcdFx0cnMobmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGpzb24pKSk7XG5cdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRkZWxldGUgd2luZG93W25hbWVdO1xuXHRcdH07XG5cblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdH0pXG4pKDApO1xuXG5qUXVlcnkuZm4uY2hlY2tTVkcgPSBmdW5jdGlvbigpIHtcblx0aWYoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgJ3N2ZycpLmNyZWF0ZVNWR1JlY3QgIT09IHVuZGVmaW5lZClcblx0XHRyZXR1cm4galF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCduby1zdmcnKTtcblx0ZWxzZVxuXHRcdHJldHVybiBqUXVlcnkodGhpcykuYWRkQ2xhc3MoJ25vLXN2ZycpO1xufTtcblxualF1ZXJ5LmZuLmNoZWNrRmxleGJveCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoKCdmbGV4V3JhcCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB8fCAoJ1dlYmtpdEZsZXhXcmFwJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHx8ICgnbXNGbGV4V3JhcCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSlcblx0XHRyZXR1cm4galF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCduby1mbGV4Jyk7XG5cdGVsc2Vcblx0XHRyZXR1cm4galF1ZXJ5KHRoaXMpLmFkZENsYXNzKCduby1mbGV4Jyk7XG59O1xuXG5qUXVlcnkuZm4uY2xvbmVJdGVtcyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBudW0sIGRlYnVnKSB7XG5cdHZhciAkZWxlbSA9IGpRdWVyeSh0aGlzKSxcblx0XHRudW0gPSAobnVtKSA/IG51bSA6IDIsXG5cdFx0ZGVidWcgPSAoZGVidWcpID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdFx0JGVsZW0uZmluZChzZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGl0ZW0gPSAkKHRoaXMpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBudW07IGkrKykge1xuXHRcdFx0XHQkaXRlbS5hZnRlcigkKHRoaXMpLmNsb25lKCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYoZGVidWcpXG5cdFx0XHRjb25zb2xlLmxvZygkZWxlbSk7XG5cblx0XHRyZXR1cm4gJGVsZW07XG59O1xuXG5qUXVlcnkuZm4uc3BsaXRDbG9uZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBudW0sIGRlYnVnKSB7XG5cdHZhciAkZWxlbSA9IGpRdWVyeSh0aGlzKSxcblx0XHRudW0gPSAobnVtKSA/IG51bSA6IDIsXG5cdFx0ZGVidWcgPSAoZGVidWcpID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdFx0JGVsZW0uZmluZChzZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGl0ZW0gPSAkKHRoaXMpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBudW07IGkrKykge1xuXHRcdFx0XHQkaXRlbSA9ICRpdGVtLm5leHQoKTtcblx0XHRcdFx0aWYgKCEkaXRlbS5sZW5ndGgpIHtcblx0XHRcdFx0XHQkaXRlbSA9ICQodGhpcykuc2libGluZ3MoJzpmaXJzdCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRpdGVtLmNoaWxkcmVuKCc6Zmlyc3QtY2hpbGQnKS5jbG9uZSgpLmFwcGVuZFRvKCQodGhpcykpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYoZGVidWcpXG5cdFx0XHRjb25zb2xlLmxvZygkZWxlbSk7XG5cblx0XHRyZXR1cm4gJGVsZW07XG59O1xuXG5qUXVlcnkuZm4uZGV0ZWN0Q29sbGlzaW9ucyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBkZWJ1Zykge1xuXHR2YXIgJGVsZW0gPSBqUXVlcnkodGhpcyksXG4gICAgXHQkdGFyZ2V0ID0galF1ZXJ5KHNlbGVjdG9yKSxcblx0XHRkZWJ1ZyA9IChkZWJ1ZykgPyB0cnVlIDogZmFsc2U7XG5cblx0dmFyIGMgPSB7XG5cdFx0b2Zmc2V0WDE6ICRlbGVtLm9mZnNldCgpLmxlZnQsXG5cdFx0b2Zmc2V0WTE6ICRlbGVtLm9mZnNldCgpLnRvcCxcblx0XHRoZWlnaHQxOiAkZWxlbS5vdXRlckhlaWdodCh0cnVlKSxcblx0XHR3aWR0aDE6ICRlbGVtLm91dGVyV2lkdGgodHJ1ZSksXG5cdFx0Ym91bmRpbmdCb3hZMTogJGVsZW0ub2Zmc2V0KCkudG9wICsgJGVsZW0ub3V0ZXJIZWlnaHQodHJ1ZSksXG5cdFx0Ym91bmRpbmdCb3hYMTogJGVsZW0ub2Zmc2V0KCkubGVmdCArICRlbGVtLm91dGVyV2lkdGgodHJ1ZSksXG5cdFx0b2Zmc2V0WDI6ICR0YXJnZXQub2Zmc2V0KCkubGVmdCArIDEsXG5cdFx0b2Zmc2V0WTI6ICR0YXJnZXQub2Zmc2V0KCkudG9wICsgMSxcblx0XHRoZWlnaHQyOiAkdGFyZ2V0Lm91dGVySGVpZ2h0KHRydWUpLFxuXHRcdHdpZHRoMjogJHRhcmdldC5vdXRlcldpZHRoKHRydWUpLFxuXHRcdGJvdW5kaW5nQm94WTI6ICR0YXJnZXQub2Zmc2V0KCkudG9wICsgMSArICR0YXJnZXQub3V0ZXJIZWlnaHQodHJ1ZSksXG5cdFx0Ym91bmRpbmdCb3hYMjogJHRhcmdldC5vZmZzZXQoKS5sZWZ0ICsgMSArICR0YXJnZXQub3V0ZXJXaWR0aCh0cnVlKVxuXHR9O1xuXG5cdGlmKGRlYnVnKVxuXHRcdGNvbnNvbGUubG9nKGMpO1xuXG5cdGlmIChjLmJvdW5kaW5nQm94WTEgPCBjLm9mZnNldFkyIHx8IGMub2Zmc2V0WDEgPiBjLmJvdW5kaW5nQm94WTIgfHwgYy5ib3VuZGluZ0JveFgxIDwgYy5vZmZzZXRYMiB8fCBjLm9mZnNldFgxID4gYy5ib3VuZGluZ0JveFgyKVxuXHRcdHJldHVybiBmYWxzZTtcblx0ZWxzZVxuXHRcdHJldHVybiB0cnVlO1xufTtcblxualF1ZXJ5LmZuLnNwbGl0QnlXaWR0aCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBkZXN0aW5hdGlvbiwgb2Zmc2V0LCBvdXRlciwgZGVidWcpIHtcblxuXHR2YXIgc3VtbWFyeVdpZHRoID0gMCxcblx0XHRjb250YWluZXIgPSAkKHRoaXMpLFxuXHRcdCRkZXN0aW5hdGlvbiA9IChkZXN0aW5hdGlvbikgPyAkKGRlc3RpbmF0aW9uKSA6IGZhbHNlLFxuXHRcdG9mZnNldCA9IChvZmZzZXQpID8gb2Zmc2V0IDogMCxcblx0XHRvdXRlciA9IChvdXRlcikgPyB0cnVlIDogZmFsc2UsXG5cdFx0ZGVidWcgPSAoZGVidWcpID8gdHJ1ZSA6IGZhbHNlLFxuXHRcdGNvdW50YWluZXJXaWR0aCA9IChvdXRlcikgPyAkKGNvbnRhaW5lcikub3V0ZXJXaWR0aCh0cnVlKSA6ICQoY29udGFpbmVyKS53aWR0aCgpLFxuXHRcdGRlYnVnID0gKGRlYnVnKSA/IHRydWUgOiBmYWxzZTtcblxuXHRpZihvZmZzZXQpXG5cdFx0c3VtbWFyeVdpZHRoID0gb2Zmc2V0O1xuXG5cdGlmKGRlYnVnICYmIG91dGVyKVxuXHRcdGNvbnNvbGUubG9nKCdDb3VudGFpbmVyIG91dGVyIHdpZHRoOiAnK2NvdW50YWluZXJXaWR0aCk7XG5cdGVsc2UgaWYoZGVidWcpXG5cdFx0Y29uc29sZS5sb2coJ0NvdW50YWluZXIgd2lkdGg6ICcrY291bnRhaW5lcldpZHRoKTtcblxuXHQkKHRoaXMpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgZWxlbWVudFdpZHRoID0gKG91dGVyKSA/ICQodGhpcykub3V0ZXJXaWR0aCh0cnVlKSA6ICQodGhpcykud2lkdGgoKTtcblx0XHRzdW1tYXJ5V2lkdGggPSBzdW1tYXJ5V2lkdGggKyBlbGVtZW50V2lkdGg7XG5cblx0XHRpZiAoc3VtbWFyeVdpZHRoID49IGNvdW50YWluZXJXaWR0aCkge1xuXG5cdFx0XHRpZigkZGVzdGluYXRpb24pXG5cdFx0XHRcdCRkZXN0aW5hdGlvbi5hcHBlbmQoJCh0aGlzKS5vdXRlckh0bWwoKSk7XG5cblx0XHRcdGlmKGRlYnVnKVxuXHRcdFx0XHRjb25zb2xlLmxvZygnRWxlbWVudCBvdXQgb2YgY29udGFpbmVyIHdpZHRoIGFuZCBoYXMgYmVlbiByZW1vdmVkLicpO1xuXG5cdFx0XHQkKHRoaXMpLnJlbW92ZSgpO1xuXHRcdH1cblxuXHR9KTtcblxuXHRpZihkZWJ1ZyAmJiBvdXRlcilcblx0XHRjb25zb2xlLmxvZygnU3VtbWFyeSBvdXRlciB3aWR0aDogJytzdW1tYXJ5V2lkdGgpO1xuXHRlbHNlIGlmKGRlYnVnKVxuXHRcdGNvbnNvbGUubG9nKCdTdW1tYXJ5IHdpZHRoOiAnK3N1bW1hcnlXaWR0aCk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZm4uc3BsaXRCeUhlaWdodCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBkZXN0aW5hdGlvbiwgb2Zmc2V0LCBvdXRlciwgZGVidWcpIHtcblxuXHR2YXIgc3VtbWFyeUhlaWdodCA9IDAsXG5cdFx0Y29udGFpbmVyID0gJCh0aGlzKSxcblx0XHQkZGVzdGluYXRpb24gPSAoZGVzdGluYXRpb24pID8gJChkZXN0aW5hdGlvbikgOiBmYWxzZSxcblx0XHRvZmZzZXQgPSAob2Zmc2V0KSA/IG9mZnNldCA6IDAsXG5cdFx0b3V0ZXIgPSAob3V0ZXIpID8gdHJ1ZSA6IGZhbHNlLFxuXHRcdGRlYnVnID0gKGRlYnVnKSA/IHRydWUgOiBmYWxzZSxcblx0XHRjb3VudGFpbmVySGVpZ2h0ID0gKG91dGVyKSA/ICQoY29udGFpbmVyKS5vdXRlckhlaWdodCh0cnVlKSA6ICQoY29udGFpbmVyKS5oZWlnaHQoKSxcblx0XHRkZWJ1ZyA9IChkZWJ1ZykgPyB0cnVlIDogZmFsc2U7XG5cblx0aWYob2Zmc2V0KVxuXHRcdHN1bW1hcnlIZWlnaHQgPSBvZmZzZXQ7XG5cblx0aWYoZGVidWcgJiYgb3V0ZXIpXG5cdFx0Y29uc29sZS5sb2coJ0NvdW50YWluZXIgb3V0ZXIgaGVpZ2h0OiAnK2NvdW50YWluZXJIZWlnaHQpO1xuXHRlbHNlIGlmKGRlYnVnKVxuXHRcdGNvbnNvbGUubG9nKCdDb3VudGFpbmVyIGhlaWdodDogJytjb3VudGFpbmVySGVpZ2h0KTtcblxuXHQkKHRoaXMpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgZWxlbWVudEhlaWdodCA9IChvdXRlcikgPyAkKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpIDogJCh0aGlzKS5oZWlnaHQoKTtcblx0XHRzdW1tYXJ5SGVpZ2h0ID0gc3VtbWFyeUhlaWdodCArIGVsZW1lbnRIZWlnaHQ7XG5cblx0XHRpZiAoc3VtbWFyeUhlaWdodCA+PSBjb3VudGFpbmVySGVpZ2h0KSB7XG5cblx0XHRcdGlmKCRkZXN0aW5hdGlvbilcblx0XHRcdFx0JGRlc3RpbmF0aW9uLmFwcGVuZCgkKHRoaXMpLm91dGVySHRtbCgpKTtcblxuXHRcdFx0aWYoZGVidWcpXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdFbGVtZW50IG91dCBvZiBjb250YWluZXIgaGVpZ2h0IGFuZCBoYXMgYmVlbiByZW1vdmVkLicpO1xuXG5cdFx0XHQkKHRoaXMpLnJlbW92ZSgpO1xuXHRcdH1cblxuXHR9KTtcblxuXHRpZihkZWJ1ZyAmJiBvdXRlcilcblx0XHRjb25zb2xlLmxvZygnU3VtbWFyeSBvdXRlciBoZWlnaHQ6ICcrc3VtbWFyeUhlaWdodCk7XG5cdGVsc2UgaWYoZGVidWcpXG5cdFx0Y29uc29sZS5sb2coJ1N1bW1hcnkgaGVpZ2h0OiAnK3N1bW1hcnlIZWlnaHQpO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmZuLm1heEhlaWdodCA9IGZ1bmN0aW9uKGlzb3V0ZXIsIGRlYnVnKSB7XG5cdHZhciBpc291dGVyID0gKGlzb3V0ZXIpID8gdHJ1ZSA6IGZhbHNlO1xuXHR2YXIgZGVidWcgPSAoZGVidWcpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIHZhciBoZWlnaHQgPSAwO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICBpZihpc291dGVyKVxuICAgICAgICAgICAgdmFyIGJsb2NrX2hlaWdodCA9ICQodGhpcykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdmFyIGJsb2NrX2hlaWdodCA9ICQodGhpcykuaGVpZ2h0KCk7XG5cbiAgICAgICAgaWYoYmxvY2tfaGVpZ2h0ID4gaGVpZ2h0KVxuICAgICAgICAgICAgaGVpZ2h0ID0gYmxvY2tfaGVpZ2h0O1xuXG4gICAgfSk7XG5cblx0aWYoZGVidWcpXG5cdFx0Y29uc29sZS5sb2coJ01heCBoZWlnaHQgb2YgZWxlbWVudHM6ICcraGVpZ2h0KTtcblxuICAgIHJldHVybiBoZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRDb29raWUobmFtZSkge1xuICAgIHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpLFxuICAgIHZhcnMgPSB7fSwgaW5keCwgY29va2llO1xuXG4gICAgZm9yIChpbmR4ID0gY29va2llcy5sZW5ndGggLSAxOyBpbmR4ID49IDA7IGluZHgtLSkge1xuICAgICAgICBjb29raWUgPSBjb29raWVzW2luZHhdLnNwbGl0KCc9Jyk7XG4gICAgICAgIHZhcnNbY29va2llWzBdXSA9IGNvb2tpZVsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyc1tuYW1lXTtcbn1cblxuZnVuY3Rpb24gbG9jYXRpb25IYXNoKHBhcmFtKSB7XG5cdHZhciB2YXJzID0ge307XG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UobG9jYXRpb24uaGFzaCwgJycpLnJlcGxhY2UoXG5cdFx0L1s/Jl0rKFtePSZdKyk9PyhbXiZdKik/L2dpLCAvLyByZWdleHBcblx0XHRmdW5jdGlvbihtLCBrZXksIHZhbHVlKSB7IC8vIGNhbGxiYWNrXG5cdFx0XHR2YXJzW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiAnJztcblx0XHR9XG5cdCk7XG5cblx0aWYgKHBhcmFtKSB7XG5cdFx0cmV0dXJuIHZhcnNbcGFyYW1dID8gdmFyc1twYXJhbV0gOiBudWxsO1xuXHR9XG5cdHJldHVybiB2YXJzO1xufVxuXG4vKiBqUXVlcnkuYnJvd3NlciAqL1xudmFyIG1hdGNoZWQsIGJyb3dzZXI7XG5qUXVlcnkudWFNYXRjaCA9IGZ1bmN0aW9uKHVhKSB7XG4gICAgdWEgPSB1YS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBtYXRjaCA9IC8oY2hyb21lKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKG9wZXJhKSg/Oi4qdmVyc2lvbnwpWyBcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKG1zaWUpIChbXFx3Ll0rKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgdWEuaW5kZXhPZihcImNvbXBhdGlibGVcIikgPCAwICYmIC8obW96aWxsYSkoPzouKj8gcnY6KFtcXHcuXSspfCkvLmV4ZWModWEpIHx8XG4gICAgICAgIFtdO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJyb3dzZXI6IG1hdGNoWyAxIF0gfHwgXCJcIixcbiAgICAgICAgdmVyc2lvbjogbWF0Y2hbIDIgXSB8fCBcIjBcIlxuICAgIH07XG59O1xubWF0Y2hlZCA9IGpRdWVyeS51YU1hdGNoKCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XG5icm93c2VyID0ge307XG5pZiAobWF0Y2hlZC5icm93c2VyKSB7XG4gICAgYnJvd3NlclttYXRjaGVkLmJyb3dzZXJdID0gdHJ1ZTtcbiAgICBicm93c2VyLnZlcnNpb24gPSBtYXRjaGVkLnZlcnNpb247XG59XG5cbi8vIENocm9tZSBpcyBXZWJraXQsIGJ1dCBXZWJraXQgaXMgYWxzbyBTYWZhcmkuXG5pZiAoYnJvd3Nlci5jaHJvbWUpIHtcbiAgICBicm93c2VyLndlYmtpdCA9IHRydWU7XG59IGVsc2UgaWYgKGJyb3dzZXIud2Via2l0KSB7XG4gICAgYnJvd3Nlci5zYWZhcmkgPSB0cnVlO1xufVxualF1ZXJ5LmJyb3dzZXIgPSBicm93c2VyO1xuXG5cbi8vIFNtb290aCBzY3JvbGwgcGx1Z2luXG5mdW5jdGlvbiBzbW9vdGhTY3JvbGwoKSB7XG5cblx0aWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHdoZWVsLCBmYWxzZSk7XG5cblx0d2luZG93Lm9ubW91c2V3aGVlbCA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCA9IHdoZWVsO1xuXG5cdHZhciBoYiA9IHtcblx0XHRzVG9wOiAwLFxuXHRcdHNEZWx0YTogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHdoZWVsKGV2ZW50KSB7XG5cblx0XHR2YXIgZGlzdGFuY2UgPSBqUXVlcnkuYnJvd3Nlci53ZWJraXQgPyA2MCA6IDEyMDtcblx0XHRpZiAoZXZlbnQud2hlZWxEZWx0YSlcblx0XHRcdGRlbHRhID0gZXZlbnQud2hlZWxEZWx0YSAvIDEyMDtcblx0XHRlbHNlIGlmIChldmVudC5kZXRhaWwpXG5cdFx0XHRkZWx0YSA9IC1ldmVudC5kZXRhaWwgLyAzO1xuXG5cdFx0aGIuc1RvcCA9IGpRdWVyeSh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuXHRcdGhiLnNEZWx0YSA9IGhiLnNEZWx0YSArIGRlbHRhICogZGlzdGFuY2U7XG5cblx0XHRqUXVlcnkoaGIpLnN0b3AoKS5hbmltYXRlKHtcblx0XHRcdHNUb3A6IGpRdWVyeSh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gaGIuc0RlbHRhLFxuXHRcdFx0c0RlbHRhOiAwXG5cdFx0fSwge1xuXHRcdFx0ZHVyYXRpb246IDIwMCxcblx0XHRcdGVhc2luZzogJ2xpbmVhcicsXG5cdFx0XHRzdGVwOiBmdW5jdGlvbihub3csIGV4KSB7XG5cdFx0XHRcdGlmIChleC5wcm9wID09ICdzVG9wJykgalF1ZXJ5KCdodG1sLCBib2R5Jykuc2Nyb2xsVG9wKG5vdylcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRpZiAoZXZlbnQucHJldmVudERlZmF1bHQpXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0ZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZVxuXHR9XG5cbn1cblxuLypcbiogalF1ZXJ5IE1vYmlsZSB2MS41LjAtcHJlXG4qIGh0dHA6Ly9qcXVlcnltb2JpbGUuY29tXG4qXG4qIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuKlxuKi9cblxuKGZ1bmN0aW9uICggcm9vdCwgZG9jLCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiBdLCBmdW5jdGlvbiAoICQgKSB7XG5cdFx0XHRmYWN0b3J5KCAkLCByb290LCBkb2MgKTtcblx0XHRcdHJldHVybiAkLm1vYmlsZTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCByb290LmpRdWVyeSwgcm9vdCwgZG9jICk7XG5cdH1cbn0oIHRoaXMsIGRvY3VtZW50LCBmdW5jdGlvbiAoIGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkICkgey8qIVxuICogalF1ZXJ5IE1vYmlsZSBWaXJ0dWFsIE1vdXNlIEBWRVJTSU9OXG4gKiBodHRwOi8vanF1ZXJ5bW9iaWxlLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBWaXJ0dWFsIE1vdXNlICh2bW91c2UpIEJpbmRpbmdzXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogTm9ybWFsaXplcyB0b3VjaC9tb3VzZSBldmVudHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnltb2JpbGUuY29tLz9zPXZtb3VzZVxuXG4vLyBUaGlzIHBsdWdpbiBpcyBhbiBleHBlcmltZW50IGZvciBhYnN0cmFjdGluZyBhd2F5IHRoZSB0b3VjaCBhbmQgbW91c2Vcbi8vIGV2ZW50cyBzbyB0aGF0IGRldmVsb3BlcnMgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCB3aGljaCBtZXRob2Qgb2YgaW5wdXRcbi8vIHRoZSBkZXZpY2UgdGhlaXIgZG9jdW1lbnQgaXMgbG9hZGVkIG9uIHN1cHBvcnRzLlxuLy9cbi8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gYWxsb3cgdGhlIGRldmVsb3BlciB0byByZWdpc3RlciBsaXN0ZW5lcnMgZm9yIHRoZVxuLy8gYmFzaWMgbW91c2UgZXZlbnRzLCBzdWNoIGFzIG1vdXNlZG93biwgbW91c2Vtb3ZlLCBtb3VzZXVwLCBhbmQgY2xpY2ssXG4vLyBhbmQgdGhlIHBsdWdpbiB3aWxsIHRha2UgY2FyZSBvZiByZWdpc3RlcmluZyB0aGUgY29ycmVjdCBsaXN0ZW5lcnNcbi8vIGJlaGluZCB0aGUgc2NlbmVzIHRvIGludm9rZSB0aGUgbGlzdGVuZXIgYXQgdGhlIGZhc3Rlc3QgcG9zc2libGUgdGltZVxuLy8gZm9yIHRoYXQgZGV2aWNlLCB3aGlsZSBzdGlsbCByZXRhaW5pbmcgdGhlIG9yZGVyIG9mIGV2ZW50IGZpcmluZyBpblxuLy8gdGhlIHRyYWRpdGlvbmFsIG1vdXNlIGVudmlyb25tZW50LCBzaG91bGQgbXVsdGlwbGUgaGFuZGxlcnMgYmUgcmVnaXN0ZXJlZFxuLy8gb24gdGhlIHNhbWUgZWxlbWVudCBmb3IgZGlmZmVyZW50IGV2ZW50cy5cbi8vXG4vLyBUaGUgY3VycmVudCB2ZXJzaW9uIGV4cG9zZXMgdGhlIGZvbGxvd2luZyB2aXJ0dWFsIGV2ZW50cyB0byBqUXVlcnkgYmluZCBtZXRob2RzOlxuLy8gXCJ2bW91c2VvdmVyIHZtb3VzZWRvd24gdm1vdXNlbW92ZSB2bW91c2V1cCB2Y2xpY2sgdm1vdXNlb3V0IHZtb3VzZWNhbmNlbFwiXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCAndm1vdXNlJyxbIFwianF1ZXJ5XCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKSggZnVuY3Rpb24oICQgKSB7XG5cbnZhciBkYXRhUHJvcGVydHlOYW1lID0gXCJ2aXJ0dWFsTW91c2VCaW5kaW5nc1wiLFxuXHR0b3VjaFRhcmdldFByb3BlcnR5TmFtZSA9IFwidmlydHVhbFRvdWNoSURcIixcblx0dG91Y2hFdmVudFByb3BzID0gXCJjbGllbnRYIGNsaWVudFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZXCIuc3BsaXQoIFwiIFwiICksXG5cdHZpcnR1YWxFdmVudE5hbWVzID0gXCJ2bW91c2VvdmVyIHZtb3VzZWRvd24gdm1vdXNlbW92ZSB2bW91c2V1cCB2Y2xpY2sgdm1vdXNlb3V0IHZtb3VzZWNhbmNlbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRnZW5lcmFsUHJvcHMgPSAoIFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgXCIgK1xuXHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXG5cdG1vdXNlSG9va1Byb3BzID0gJC5ldmVudC5tb3VzZUhvb2tzID8gJC5ldmVudC5tb3VzZUhvb2tzLnByb3BzIDogW10sXG5cdG1vdXNlRXZlbnRQcm9wcyA9IGdlbmVyYWxQcm9wcy5jb25jYXQoIG1vdXNlSG9va1Byb3BzICksXG5cdGFjdGl2ZURvY0hhbmRsZXJzID0ge30sXG5cdHJlc2V0VGltZXJJRCA9IDAsXG5cdHN0YXJ0WCA9IDAsXG5cdHN0YXJ0WSA9IDAsXG5cdGRpZFNjcm9sbCA9IGZhbHNlLFxuXHRjbGlja0Jsb2NrTGlzdCA9IFtdLFxuXHRibG9ja01vdXNlVHJpZ2dlcnMgPSBmYWxzZSxcblx0YmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2UsXG5cdGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCA9IFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIGRvY3VtZW50LFxuXHQkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRuZXh0VG91Y2hJRCA9IDEsXG5cdGxhc3RUb3VjaElEID0gMCwgdGhyZXNob2xkLFxuXHRpO1xuXG4kLnZtb3VzZSA9IHtcblx0bW92ZURpc3RhbmNlVGhyZXNob2xkOiAxMCxcblx0Y2xpY2tEaXN0YW5jZVRocmVzaG9sZDogMTAsXG5cdHJlc2V0VGltZXJEdXJhdGlvbjogMTUwMCxcblx0bWF4aW11bVRpbWVCZXR3ZWVuVG91Y2hlczogMTAwXG59O1xuXG5mdW5jdGlvbiBnZXROYXRpdmVFdmVudCggZXZlbnQgKSB7XG5cblx0d2hpbGUgKCBldmVudCAmJiB0eXBlb2YgZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdH1cblx0cmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWaXJ0dWFsRXZlbnQoIGV2ZW50LCBldmVudFR5cGUgKSB7XG5cblx0dmFyIHQgPSBldmVudC50eXBlLFxuXHRcdG9lLCBwcm9wcywgbmUsIHByb3AsIGN0LCB0b3VjaCwgaSwgaiwgbGVuO1xuXG5cdGV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTtcblx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblxuXHRvZSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG5cdHByb3BzID0gZ2VuZXJhbFByb3BzO1xuXG5cdC8vIGFkZHJlc3NlcyBzZXBhcmF0aW9uIG9mICQuZXZlbnQucHJvcHMgaW4gdG8gJC5ldmVudC5tb3VzZUhvb2sucHJvcHMgYW5kIElzc3VlIDMyODBcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8zMjgwXG5cdGlmICggdC5zZWFyY2goIC9eKG1vdXNlfGNsaWNrKS8gKSA+IC0xICkge1xuXHRcdHByb3BzID0gbW91c2VFdmVudFByb3BzO1xuXHR9XG5cblx0Ly8gY29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudFxuXHQvLyB0aGlzIHdvdWxkIGhhcHBlbiBpZiB3ZSBjb3VsZCBjYWxsICQuZXZlbnQuZml4IGluc3RlYWQgb2YgJC5FdmVudFxuXHQvLyBidXQgd2UgZG9uJ3QgaGF2ZSBhIHdheSB0byBmb3JjZSBhbiBldmVudCB0byBiZSBmaXhlZCBtdWx0aXBsZSB0aW1lc1xuXHRpZiAoIG9lICkge1xuXHRcdGZvciAoIGkgPSBwcm9wcy5sZW5ndGg7IGk7ICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyAtLWkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvZVsgcHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIG1ha2Ugc3VyZSB0aGF0IGlmIHRoZSBtb3VzZSBhbmQgY2xpY2sgdmlydHVhbCBldmVudHMgYXJlIGdlbmVyYXRlZFxuXHQvLyB3aXRob3V0IGEgLndoaWNoIG9uZSBpcyBkZWZpbmVkXG5cdGlmICggdC5zZWFyY2goIC9tb3VzZShkb3dufHVwKXxjbGljay8gKSA+IC0xICYmICFldmVudC53aGljaCApIHtcblx0XHRldmVudC53aGljaCA9IDE7XG5cdH1cblxuXHRpZiAoIHQuc2VhcmNoKCAvXnRvdWNoLyApICE9PSAtMSApIHtcblx0XHRuZSA9IGdldE5hdGl2ZUV2ZW50KCBvZSApO1xuXHRcdHQgPSBuZS50b3VjaGVzO1xuXHRcdGN0ID0gbmUuY2hhbmdlZFRvdWNoZXM7XG5cdFx0dG91Y2ggPSAoIHQgJiYgdC5sZW5ndGggKSA/IHRbIDAgXSA6ICggKCBjdCAmJiBjdC5sZW5ndGggKSA/IGN0WyAwIF0gOiB1bmRlZmluZWQgKTtcblxuXHRcdGlmICggdG91Y2ggKSB7XG5cdFx0XHRmb3IgKCBqID0gMCwgbGVuID0gdG91Y2hFdmVudFByb3BzLmxlbmd0aDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRwcm9wID0gdG91Y2hFdmVudFByb3BzWyBqIF07XG5cdFx0XHRcdGV2ZW50WyBwcm9wIF0gPSB0b3VjaFsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBldmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZWxlbWVudCApIHtcblxuXHR2YXIgZmxhZ3MgPSB7fSxcblx0XHRiLCBrO1xuXG5cdHdoaWxlICggZWxlbWVudCApIHtcblxuXHRcdGIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTtcblxuXHRcdGZvciAoIGsgaW4gYiApIHtcblx0XHRcdGlmICggYlsgayBdICkge1xuXHRcdFx0XHRmbGFnc1sgayBdID0gZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cdHJldHVybiBmbGFncztcbn1cblxuZnVuY3Rpb24gZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmcoIGVsZW1lbnQsIGV2ZW50VHlwZSApIHtcblx0dmFyIGI7XG5cdHdoaWxlICggZWxlbWVudCApIHtcblxuXHRcdGIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTtcblxuXHRcdGlmICggYiAmJiAoICFldmVudFR5cGUgfHwgYlsgZXZlbnRUeXBlIF0gKSApIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBlbmFibGVUb3VjaEJpbmRpbmdzKCkge1xuXHRibG9ja1RvdWNoVHJpZ2dlcnMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZVRvdWNoQmluZGluZ3MoKSB7XG5cdGJsb2NrVG91Y2hUcmlnZ2VycyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZU1vdXNlQmluZGluZ3MoKSB7XG5cdGxhc3RUb3VjaElEID0gMDtcblx0Y2xpY2tCbG9ja0xpc3QubGVuZ3RoID0gMDtcblx0YmxvY2tNb3VzZVRyaWdnZXJzID0gZmFsc2U7XG5cblx0Ly8gV2hlbiBtb3VzZSBiaW5kaW5ncyBhcmUgZW5hYmxlZCwgb3VyXG5cdC8vIHRvdWNoIGJpbmRpbmdzIGFyZSBkaXNhYmxlZC5cblx0ZGlzYWJsZVRvdWNoQmluZGluZ3MoKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZU1vdXNlQmluZGluZ3MoKSB7XG5cdC8vIFdoZW4gbW91c2UgYmluZGluZ3MgYXJlIGRpc2FibGVkLCBvdXJcblx0Ly8gdG91Y2ggYmluZGluZ3MgYXJlIGVuYWJsZWQuXG5cdGVuYWJsZVRvdWNoQmluZGluZ3MoKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJSZXNldFRpbWVyKCkge1xuXHRpZiAoIHJlc2V0VGltZXJJRCApIHtcblx0XHRjbGVhclRpbWVvdXQoIHJlc2V0VGltZXJJRCApO1xuXHRcdHJlc2V0VGltZXJJRCA9IDA7XG5cdH1cbn1cblxuZnVuY3Rpb24gc3RhcnRSZXNldFRpbWVyKCkge1xuXHRjbGVhclJlc2V0VGltZXIoKTtcblx0cmVzZXRUaW1lcklEID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0cmVzZXRUaW1lcklEID0gMDtcblx0XHRlbmFibGVNb3VzZUJpbmRpbmdzKCk7XG5cdH0sICQudm1vdXNlLnJlc2V0VGltZXJEdXJhdGlvbiApO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyVmlydHVhbEV2ZW50KCBldmVudFR5cGUsIGV2ZW50LCBmbGFncyApIHtcblx0dmFyIHZlO1xuXG5cdGlmICggKCBmbGFncyAmJiBmbGFnc1sgZXZlbnRUeXBlIF0gKSB8fFxuXHRcdFx0KCAhZmxhZ3MgJiYgZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmcoIGV2ZW50LnRhcmdldCwgZXZlbnRUeXBlICkgKSApIHtcblxuXHRcdHZlID0gY3JlYXRlVmlydHVhbEV2ZW50KCBldmVudCwgZXZlbnRUeXBlICk7XG5cblx0XHQkKCBldmVudC50YXJnZXQgKS50cmlnZ2VyKCB2ZSApO1xuXHR9XG5cblx0cmV0dXJuIHZlO1xufVxuXG5mdW5jdGlvbiBtb3VzZUV2ZW50Q2FsbGJhY2soIGV2ZW50ICkge1xuXHR2YXIgdG91Y2hJRCA9ICQuZGF0YSggZXZlbnQudGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSApLFxuXHRcdHZlO1xuXG5cdC8vIEl0IGlzIHVuZXhwZWN0ZWQgaWYgYSBjbGljayBldmVudCBpcyByZWNlaXZlZCBiZWZvcmUgYSB0b3VjaGVuZFxuXHQvLyBvciB0b3VjaG1vdmUgZXZlbnQsIGhvd2V2ZXIgdGhpcyBpcyBhIGtub3duIGJlaGF2aW9yIGluIE1vYmlsZVxuXHQvLyBTYWZhcmkgd2hlbiBNb2JpbGUgVm9pY2VPdmVyIChhcyBvZiBpT1MgOCkgaXMgZW5hYmxlZCBhbmQgdGhlIHVzZXJcblx0Ly8gZG91YmxlIHRhcHMgdG8gYWN0aXZhdGUgYSBsaW5rIGVsZW1lbnQuIEluIHRoZXNlIGNhc2VzIGlmIGEgdG91Y2hcblx0Ly8gZXZlbnQgaXMgbm90IHJlY2VpdmVkIHdpdGhpbiB0aGUgbWF4aW11bSB0aW1lIGJldHdlZW4gdG91Y2hlcyxcblx0Ly8gcmUtZW5hYmxlIG1vdXNlIGJpbmRpbmdzIGFuZCBjYWxsIHRoZSBtb3VzZSBldmVudCBoYW5kbGVyIGFnYWluLlxuXHRpZiAoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiAkLmRhdGEoIGV2ZW50LnRhcmdldCwgXCJsYXN0VG91Y2hUeXBlXCIgKSA9PT0gXCJ0b3VjaHN0YXJ0XCIgKSB7XG5cdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQuZGF0YSggZXZlbnQudGFyZ2V0LCBcImxhc3RUb3VjaFR5cGVcIiApID09PSBcInRvdWNoc3RhcnRcIiApIHtcblx0XHRcdFx0ZW5hYmxlTW91c2VCaW5kaW5ncygpO1xuXHRcdFx0XHRkZWxldGUgJC5kYXRhKCBldmVudC50YXJnZXQgKS5sYXN0VG91Y2hUeXBlO1xuXHRcdFx0XHRtb3VzZUV2ZW50Q2FsbGJhY2soIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSwgJC52bW91c2UubWF4aW11bVRpbWVCZXR3ZWVuVG91Y2hlcyApO1xuXHR9XG5cblx0aWYgKCAhYmxvY2tNb3VzZVRyaWdnZXJzICYmICggIWxhc3RUb3VjaElEIHx8IGxhc3RUb3VjaElEICE9PSB0b3VjaElEICkgKSB7XG5cdFx0dmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZcIiArIGV2ZW50LnR5cGUsIGV2ZW50ICk7XG5cdFx0aWYgKCB2ZSApIHtcblx0XHRcdGlmICggdmUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2ZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydCggZXZlbnQgKSB7XG5cblx0dmFyIHRvdWNoZXMgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS50b3VjaGVzLFxuXHRcdHRhcmdldCwgZmxhZ3MsIHQ7XG5cblx0aWYgKCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0dGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdGZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggdGFyZ2V0ICk7XG5cblx0XHQkLmRhdGEoIGV2ZW50LnRhcmdldCwgXCJsYXN0VG91Y2hUeXBlXCIsIGV2ZW50LnR5cGUgKTtcblxuXHRcdGlmICggZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgKSB7XG5cblx0XHRcdGxhc3RUb3VjaElEID0gbmV4dFRvdWNoSUQrKztcblx0XHRcdCQuZGF0YSggdGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSwgbGFzdFRvdWNoSUQgKTtcblxuXHRcdFx0Y2xlYXJSZXNldFRpbWVyKCk7XG5cblx0XHRcdGRpc2FibGVNb3VzZUJpbmRpbmdzKCk7XG5cdFx0XHRkaWRTY3JvbGwgPSBmYWxzZTtcblxuXHRcdFx0dCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXTtcblx0XHRcdHN0YXJ0WCA9IHQucGFnZVg7XG5cdFx0XHRzdGFydFkgPSB0LnBhZ2VZO1xuXG5cdFx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZW92ZXJcIiwgZXZlbnQsIGZsYWdzICk7XG5cdFx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZWRvd25cIiwgZXZlbnQsIGZsYWdzICk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNjcm9sbCggZXZlbnQgKSB7XG5cdGlmICggYmxvY2tUb3VjaFRyaWdnZXJzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICggIWRpZFNjcm9sbCApIHtcblx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZWNhbmNlbFwiLCBldmVudCwgZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICkgKTtcblx0fVxuXG5cdCQuZGF0YSggZXZlbnQudGFyZ2V0LCBcImxhc3RUb3VjaFR5cGVcIiwgZXZlbnQudHlwZSApO1xuXG5cdGRpZFNjcm9sbCA9IHRydWU7XG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIGV2ZW50ICkge1xuXHRpZiAoIGJsb2NrVG91Y2hUcmlnZ2VycyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXSxcblx0XHRkaWRDYW5jZWwgPSBkaWRTY3JvbGwsXG5cdFx0bW92ZVRocmVzaG9sZCA9ICQudm1vdXNlLm1vdmVEaXN0YW5jZVRocmVzaG9sZCxcblx0XHRmbGFncyA9IGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApO1xuXG5cdCQuZGF0YSggZXZlbnQudGFyZ2V0LCBcImxhc3RUb3VjaFR5cGVcIiwgZXZlbnQudHlwZSApO1xuXG5cdGRpZFNjcm9sbCA9IGRpZFNjcm9sbCB8fFxuXHRcdCggTWF0aC5hYnMoIHQucGFnZVggLSBzdGFydFggKSA+IG1vdmVUaHJlc2hvbGQgfHxcblx0XHRNYXRoLmFicyggdC5wYWdlWSAtIHN0YXJ0WSApID4gbW92ZVRocmVzaG9sZCApO1xuXG5cdGlmICggZGlkU2Nyb2xsICYmICFkaWRDYW5jZWwgKSB7XG5cdFx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2VjYW5jZWxcIiwgZXZlbnQsIGZsYWdzICk7XG5cdH1cblxuXHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZW1vdmVcIiwgZXZlbnQsIGZsYWdzICk7XG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCggZXZlbnQgKSB7XG5cdGlmICggYmxvY2tUb3VjaFRyaWdnZXJzIHx8ICQuZGF0YSggZXZlbnQudGFyZ2V0LCBcImxhc3RUb3VjaFR5cGVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZGlzYWJsZVRvdWNoQmluZGluZ3MoKTtcblx0ZGVsZXRlICQuZGF0YSggZXZlbnQudGFyZ2V0ICkubGFzdFRvdWNoVHlwZTtcblxuXHR2YXIgZmxhZ3MgPSBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBldmVudC50YXJnZXQgKSxcblx0XHR2ZSwgdDtcblx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2V1cFwiLCBldmVudCwgZmxhZ3MgKTtcblxuXHRpZiAoICFkaWRTY3JvbGwgKSB7XG5cdFx0dmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZjbGlja1wiLCBldmVudCwgZmxhZ3MgKTtcblx0XHRpZiAoIHZlICYmIHZlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0Ly8gVGhlIHRhcmdldCBvZiB0aGUgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IHRoZSB0b3VjaGVuZFxuXHRcdFx0Ly8gZXZlbnQgZG9uJ3QgbmVjZXNzYXJpbHkgbWF0Y2ggdGhlIHRhcmdldCB1c2VkIGR1cmluZyB0aGVcblx0XHRcdC8vIHRvdWNoLiBUaGlzIG1lYW5zIHdlIG5lZWQgdG8gcmVseSBvbiBjb29yZGluYXRlcyBmb3IgYmxvY2tpbmdcblx0XHRcdC8vIGFueSBjbGljayB0aGF0IGlzIGdlbmVyYXRlZC5cblx0XHRcdHQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS5jaGFuZ2VkVG91Y2hlc1sgMCBdO1xuXHRcdFx0Y2xpY2tCbG9ja0xpc3QucHVzaCgge1xuXHRcdFx0XHR0b3VjaElEOiBsYXN0VG91Y2hJRCxcblx0XHRcdFx0eDogdC5jbGllbnRYLFxuXHRcdFx0XHR5OiB0LmNsaWVudFlcblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gUHJldmVudCBhbnkgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IGZyb20gdHJpZ2dlcmluZ1xuXHRcdFx0Ly8gdmlydHVhbCBldmVudCBub3RpZmljYXRpb25zLlxuXHRcdFx0YmxvY2tNb3VzZVRyaWdnZXJzID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2VvdXRcIiwgZXZlbnQsIGZsYWdzICk7XG5cdGRpZFNjcm9sbCA9IGZhbHNlO1xuXG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYXNWaXJ0dWFsQmluZGluZ3MoIGVsZSApIHtcblx0dmFyIGJpbmRpbmdzID0gJC5kYXRhKCBlbGUsIGRhdGFQcm9wZXJ0eU5hbWUgKSxcblx0XHRrO1xuXG5cdGlmICggYmluZGluZ3MgKSB7XG5cdFx0Zm9yICggayBpbiBiaW5kaW5ncyApIHtcblx0XHRcdGlmICggYmluZGluZ3NbIGsgXSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZHVtbXlNb3VzZUhhbmRsZXIoKSB7XG59XG5cbmZ1bmN0aW9uIGdldFNwZWNpYWxFdmVudE9iamVjdCggZXZlbnRUeXBlICkge1xuXHR2YXIgcmVhbFR5cGUgPSBldmVudFR5cGUuc3Vic3RyKCAxICk7XG5cblx0cmV0dXJuIHtcblx0XHRzZXR1cDogZnVuY3Rpb24oIC8qIGRhdGEsIG5hbWVzcGFjZSAqLyApIHtcblx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhpcyBlbGVtZW50LFxuXHRcdFx0Ly8gYWRkIGEgYmluZGluZ3Mgb2JqZWN0IHRvIGl0cyBkYXRhLlxuXG5cdFx0XHRpZiAoICFoYXNWaXJ0dWFsQmluZGluZ3MoIHRoaXMgKSApIHtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lLCB7fSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBzZXR1cCBpcyBjYWxsZWQsIHdlIGtub3cgaXQgaXMgdGhlIGZpcnN0IGJpbmRpbmcgZm9yIHRoaXNcblx0XHRcdC8vIGV2ZW50VHlwZSwgc28gaW5pdGlhbGl6ZSB0aGUgY291bnQgZm9yIHRoZSBldmVudFR5cGUgdG8gemVyby5cblx0XHRcdHZhciBiaW5kaW5ncyA9ICQuZGF0YSggdGhpcywgZGF0YVByb3BlcnR5TmFtZSApO1xuXHRcdFx0YmluZGluZ3NbIGV2ZW50VHlwZSBdID0gdHJ1ZTtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBldmVudCBmb3IgdGhpcyB0eXBlLFxuXHRcdFx0Ly8gcmVnaXN0ZXIgYSBnbG9iYWwgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuXG5cblx0XHRcdGFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSA9ICggYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdIHx8IDAgKSArIDE7XG5cblx0XHRcdGlmICggYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdID09PSAxICkge1xuXHRcdFx0XHQkZG9jdW1lbnQuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTb21lIGJyb3dzZXJzLCBsaWtlIE9wZXJhIE1pbmksIHdvbid0IGRpc3BhdGNoIG1vdXNlL2NsaWNrIGV2ZW50c1xuXHRcdFx0Ly8gZm9yIGVsZW1lbnRzIHVubGVzcyB0aGV5IGFjdHVhbGx5IGhhdmUgaGFuZGxlcnMgcmVnaXN0ZXJlZCBvbiB0aGVtLlxuXHRcdFx0Ly8gVG8gZ2V0IGFyb3VuZCB0aGlzLCB3ZSByZWdpc3RlciBkdW1teSBoYW5kbGVycyBvbiB0aGUgZWxlbWVudHMuXG5cblx0XHRcdCQoIHRoaXMgKS5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTtcblxuXHRcdFx0Ly8gRm9yIG5vdywgaWYgZXZlbnQgY2FwdHVyZSBpcyBub3Qgc3VwcG9ydGVkLCB3ZSByZWx5IG9uIG1vdXNlIGhhbmRsZXJzLlxuXHRcdFx0aWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhlIGRvY3VtZW50LFxuXHRcdFx0XHQvLyByZWdpc3RlciBvdXIgdG91Y2hzdGFydCBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudC5cblxuXHRcdFx0XHRhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSA9ICggYWN0aXZlRG9jSGFuZGxlcnNbIFwidG91Y2hzdGFydFwiIF0gfHwgMCApICsgMTtcblxuXHRcdFx0XHRpZiAoIGFjdGl2ZURvY0hhbmRsZXJzWyBcInRvdWNoc3RhcnRcIiBdID09PSAxICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5iaW5kKCBcInRvdWNoc3RhcnRcIiwgaGFuZGxlVG91Y2hTdGFydCApXG5cdFx0XHRcdFx0XHQuYmluZCggXCJ0b3VjaGVuZFwiLCBoYW5kbGVUb3VjaEVuZCApXG5cblx0XHRcdFx0XHRcdC8vIE9uIHRvdWNoIHBsYXRmb3JtcywgdG91Y2hpbmcgdGhlIHNjcmVlbiBhbmQgdGhlbiBkcmFnZ2luZyB5b3VyIGZpbmdlclxuXHRcdFx0XHRcdFx0Ly8gY2F1c2VzIHRoZSB3aW5kb3cgY29udGVudCB0byBzY3JvbGwgYWZ0ZXIgc29tZSBkaXN0YW5jZSB0aHJlc2hvbGQgaXNcblx0XHRcdFx0XHRcdC8vIGV4Y2VlZGVkLiBPbiB0aGVzZSBwbGF0Zm9ybXMsIGEgc2Nyb2xsIHByZXZlbnRzIGEgY2xpY2sgZXZlbnQgZnJvbSBiZWluZ1xuXHRcdFx0XHRcdFx0Ly8gZGlzcGF0Y2hlZCwgYW5kIG9uIHNvbWUgcGxhdGZvcm1zLCBldmVuIHRoZSB0b3VjaGVuZCBpcyBzdXBwcmVzc2VkLiBUb1xuXHRcdFx0XHRcdFx0Ly8gbWltaWMgdGhlIHN1cHByZXNzaW9uIG9mIHRoZSBjbGljayBldmVudCwgd2UgbmVlZCB0byB3YXRjaCBmb3IgYSBzY3JvbGxcblx0XHRcdFx0XHRcdC8vIGV2ZW50LiBVbmZvcnR1bmF0ZWx5LCBzb21lIHBsYXRmb3JtcyBsaWtlIGlPUyBkb24ndCBkaXNwYXRjaCBzY3JvbGxcblx0XHRcdFx0XHRcdC8vIGV2ZW50cyB1bnRpbCAqQUZURVIqIHRoZSB1c2VyIGxpZnRzIHRoZWlyIGZpbmdlciAodG91Y2hlbmQpLiBUaGlzIG1lYW5zXG5cdFx0XHRcdFx0XHQvLyB3ZSBuZWVkIHRvIHdhdGNoIGJvdGggc2Nyb2xsIGFuZCB0b3VjaG1vdmUgZXZlbnRzIHRvIGZpZ3VyZSBvdXQgd2hldGhlclxuXHRcdFx0XHRcdFx0Ly8gb3Igbm90IGEgc2Nyb2xsIGhhcHBlbmVucyBiZWZvcmUgdGhlIHRvdWNoZW5kIGV2ZW50IGlzIGZpcmVkLlxuXG5cdFx0XHRcdFx0XHQuYmluZCggXCJ0b3VjaG1vdmVcIiwgaGFuZGxlVG91Y2hNb3ZlIClcblx0XHRcdFx0XHRcdC5iaW5kKCBcInNjcm9sbFwiLCBoYW5kbGVTY3JvbGwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oIC8qIGRhdGEsIG5hbWVzcGFjZSAqLyApIHtcblx0XHRcdC8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBiaW5kaW5nIGZvciB0aGlzIGV2ZW50VHlwZSxcblx0XHRcdC8vIHJlbW92ZSBpdHMgZ2xvYmFsIGhhbmRsZXIgZnJvbSB0aGUgZG9jdW1lbnQuXG5cblx0XHRcdC0tYWN0aXZlRG9jSGFuZGxlcnNbZXZlbnRUeXBlXTtcblxuXHRcdFx0aWYgKCAhYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdICkge1xuXHRcdFx0XHQkZG9jdW1lbnQudW5iaW5kKCByZWFsVHlwZSwgbW91c2VFdmVudENhbGxiYWNrICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZXZlbnRDYXB0dXJlU3VwcG9ydGVkICkge1xuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIHRoZSBsYXN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBpbiBleGlzdGVuY2UsXG5cdFx0XHRcdC8vIHJlbW92ZSBvdXIgZG9jdW1lbnQgdG91Y2hzdGFydCBsaXN0ZW5lci5cblxuXHRcdFx0XHQtLWFjdGl2ZURvY0hhbmRsZXJzW1widG91Y2hzdGFydFwiXTtcblxuXHRcdFx0XHRpZiAoICFhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQudW5iaW5kKCBcInRvdWNoc3RhcnRcIiwgaGFuZGxlVG91Y2hTdGFydCApXG5cdFx0XHRcdFx0XHQudW5iaW5kKCBcInRvdWNobW92ZVwiLCBoYW5kbGVUb3VjaE1vdmUgKVxuXHRcdFx0XHRcdFx0LnVuYmluZCggXCJ0b3VjaGVuZFwiLCBoYW5kbGVUb3VjaEVuZCApXG5cdFx0XHRcdFx0XHQudW5iaW5kKCBcInNjcm9sbFwiLCBoYW5kbGVTY3JvbGwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgJHRoaXMgPSAkKCB0aGlzICksXG5cdFx0XHRcdGJpbmRpbmdzID0gJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lICk7XG5cblx0XHRcdC8vIHRlYXJkb3duIG1heSBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHdhc1xuXHRcdFx0Ly8gcmVtb3ZlZCBmcm9tIHRoZSBET00uIElmIHRoaXMgaXMgdGhlIGNhc2UsXG5cdFx0XHQvLyBqUXVlcnkgY29yZSBtYXkgaGF2ZSBhbHJlYWR5IHN0cmlwcGVkIHRoZSBlbGVtZW50XG5cdFx0XHQvLyBvZiBhbnkgZGF0YSBiaW5kaW5ncyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGl0IGJlZm9yZVxuXHRcdFx0Ly8gdXNpbmcgaXQuXG5cdFx0XHRpZiAoIGJpbmRpbmdzICkge1xuXHRcdFx0XHRiaW5kaW5nc1sgZXZlbnRUeXBlIF0gPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVW5yZWdpc3RlciB0aGUgZHVtbXkgZXZlbnQgaGFuZGxlci5cblxuXHRcdFx0JHRoaXMudW5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgb24gdGhlXG5cdFx0XHQvLyBlbGVtZW50LCByZW1vdmUgdGhlIGJpbmRpbmcgZGF0YSBmcm9tIHRoZSBlbGVtZW50LlxuXG5cdFx0XHRpZiAoICFoYXNWaXJ0dWFsQmluZGluZ3MoIHRoaXMgKSApIHtcblx0XHRcdFx0JHRoaXMucmVtb3ZlRGF0YSggZGF0YVByb3BlcnR5TmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gRXhwb3NlIG91ciBjdXN0b20gZXZlbnRzIHRvIHRoZSBqUXVlcnkgYmluZC91bmJpbmQgbWVjaGFuaXNtLlxuXG5mb3IgKCBpID0gMDsgaSA8IHZpcnR1YWxFdmVudE5hbWVzLmxlbmd0aDsgaSsrICkge1xuXHQkLmV2ZW50LnNwZWNpYWxbIHZpcnR1YWxFdmVudE5hbWVzWyBpIF0gXSA9IGdldFNwZWNpYWxFdmVudE9iamVjdCggdmlydHVhbEV2ZW50TmFtZXNbIGkgXSApO1xufVxuXG4vLyBBZGQgYSBjYXB0dXJlIGNsaWNrIGhhbmRsZXIgdG8gYmxvY2sgY2xpY2tzLlxuLy8gTm90ZSB0aGF0IHdlIHJlcXVpcmUgZXZlbnQgY2FwdHVyZSBzdXBwb3J0IGZvciB0aGlzIHNvIGlmIHRoZSBkZXZpY2Vcbi8vIGRvZXNuJ3Qgc3VwcG9ydCBpdCwgd2UgcHVudCBmb3Igbm93IGFuZCByZWx5IHNvbGVseSBvbiBtb3VzZSBldmVudHMuXG5pZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCBmdW5jdGlvbiggZSApIHtcblx0XHR2YXIgY250ID0gY2xpY2tCbG9ja0xpc3QubGVuZ3RoLFxuXHRcdFx0dGFyZ2V0ID0gZS50YXJnZXQsXG5cdFx0XHR4LCB5LCBlbGUsIGksIG8sIHRvdWNoSUQ7XG5cblx0XHRpZiAoIGNudCApIHtcblx0XHRcdHggPSBlLmNsaWVudFg7XG5cdFx0XHR5ID0gZS5jbGllbnRZO1xuXHRcdFx0dGhyZXNob2xkID0gJC52bW91c2UuY2xpY2tEaXN0YW5jZVRocmVzaG9sZDtcblxuXHRcdFx0Ly8gVGhlIGlkZWEgaGVyZSBpcyB0byBydW4gdGhyb3VnaCB0aGUgY2xpY2tCbG9ja0xpc3QgdG8gc2VlIGlmXG5cdFx0XHQvLyB0aGUgY3VycmVudCBjbGljayBldmVudCBpcyBpbiB0aGUgcHJveGltaXR5IG9mIG9uZSBvZiBvdXJcblx0XHRcdC8vIHZjbGljayBldmVudHMgdGhhdCBoYWQgcHJldmVudERlZmF1bHQoKSBjYWxsZWQgb24gaXQuIElmIHdlIGZpbmRcblx0XHRcdC8vIG9uZSwgdGhlbiB3ZSBibG9jayB0aGUgY2xpY2suXG5cdFx0XHQvL1xuXHRcdFx0Ly8gV2h5IGRvIHdlIGhhdmUgdG8gcmVseSBvbiBwcm94aW1pdHk/XG5cdFx0XHQvL1xuXHRcdFx0Ly8gQmVjYXVzZSB0aGUgdGFyZ2V0IG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdmNsaWNrXG5cdFx0XHQvLyBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIHRhcmdldCBvZiB0aGUgY2xpY2sgZXZlbnQgc3ludGhlc2l6ZWRcblx0XHRcdC8vIGJ5IHRoZSBicm93c2VyLiBUaGUgdGFyZ2V0IG9mIGEgbW91c2UvY2xpY2sgZXZlbnQgdGhhdCBpcyBzeW50aGVzaXplZFxuXHRcdFx0Ly8gZnJvbSBhIHRvdWNoIGV2ZW50IHNlZW1zIHRvIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLiBGb3IgZXhhbXBsZSxcblx0XHRcdC8vIHNvbWUgYnJvd3NlcnMgd2lsbCBmaXJlIG1vdXNlL2NsaWNrIGV2ZW50cyBmb3IgYSBsaW5rIHRoYXQgaXMgbmVhclxuXHRcdFx0Ly8gYSB0b3VjaCBldmVudCwgZXZlbiB0aG91Z2ggdGhlIHRhcmdldCBvZiB0aGUgdG91Y2hzdGFydC90b3VjaGVuZCBldmVudFxuXHRcdFx0Ly8gc2F5cyB0aGUgdXNlciB0b3VjaGVkIG91dHNpZGUgdGhlIGxpbmsuIEFsc28sIGl0IHNlZW1zIHRoYXQgd2l0aCBtb3N0XG5cdFx0XHQvLyBicm93c2VycywgdGhlIHRhcmdldCBvZiB0aGUgbW91c2UvY2xpY2sgZXZlbnQgaXMgbm90IGNhbGN1bGF0ZWQgdW50aWwgdGhlXG5cdFx0XHQvLyB0aW1lIGl0IGlzIGRpc3BhdGNoZWQsIHNvIGlmIHlvdSByZXBsYWNlIGFuIGVsZW1lbnQgdGhhdCB5b3UgdG91Y2hlZFxuXHRcdFx0Ly8gd2l0aCBhbm90aGVyIGVsZW1lbnQsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIHdpbGwgYmUgdGhlIG5ld1xuXHRcdFx0Ly8gZWxlbWVudCB1bmRlcm5lYXRoIHRoYXQgcG9pbnQuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gQXNpZGUgZnJvbSBwcm94aW1pdHksIHdlIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgYW5kIGFueVxuXHRcdFx0Ly8gb2YgaXRzIGFuY2VzdG9ycyB3ZXJlIHRoZSBvbmVzIHRoYXQgYmxvY2tlZCBhIGNsaWNrLiBUaGlzIGlzIG5lY2Vzc2FyeVxuXHRcdFx0Ly8gYmVjYXVzZSBvZiB0aGUgc3RyYW5nZSBtb3VzZS9jbGljayB0YXJnZXQgY2FsY3VsYXRpb24gZG9uZSBpbiB0aGVcblx0XHRcdC8vIEFuZHJvaWQgMi4xIGJyb3dzZXIsIHdoZXJlIGlmIHlvdSBjbGljayBvbiBhbiBlbGVtZW50LCBhbmQgdGhlcmUgaXMgYVxuXHRcdFx0Ly8gbW91c2UvY2xpY2sgaGFuZGxlciBvbiBvbmUgb2YgaXRzIGFuY2VzdG9ycywgdGhlIHRhcmdldCB3aWxsIGJlIHRoZVxuXHRcdFx0Ly8gaW5uZXJtb3N0IGNoaWxkIG9mIHRoZSB0b3VjaGVkIGVsZW1lbnQsIGV2ZW4gaWYgdGhhdCBjaGlsZCBpcyBubyB3aGVyZVxuXHRcdFx0Ly8gbmVhciB0aGUgcG9pbnQgb2YgdG91Y2guXG5cblx0XHRcdGVsZSA9IHRhcmdldDtcblxuXHRcdFx0d2hpbGUgKCBlbGUgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY250OyBpKysgKSB7XG5cdFx0XHRcdFx0byA9IGNsaWNrQmxvY2tMaXN0WyBpIF07XG5cdFx0XHRcdFx0dG91Y2hJRCA9IDA7XG5cblx0XHRcdFx0XHRpZiAoICggZWxlID09PSB0YXJnZXQgJiYgTWF0aC5hYnMoIG8ueCAtIHggKSA8IHRocmVzaG9sZCAmJiBNYXRoLmFicyggby55IC0geSApIDwgdGhyZXNob2xkICkgfHxcblx0XHRcdFx0XHRcdFx0JC5kYXRhKCBlbGUsIHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lICkgPT09IG8udG91Y2hJRCApIHtcblx0XHRcdFx0XHRcdC8vIFhYWDogV2UgbWF5IHdhbnQgdG8gY29uc2lkZXIgcmVtb3ZpbmcgbWF0Y2hlcyBmcm9tIHRoZSBibG9jayBsaXN0XG5cdFx0XHRcdFx0XHQvLyAgICAgIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIHJlc2V0IHRpbWVyIHRvIGZpcmUuXG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbGUgPSBlbGUucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHRydWUgKTtcbn1cbn0gKTtcblxuLyohXG4gKiBqUXVlcnkgTW9iaWxlIE5hbWVzcGFjZSBAVkVSU0lPTlxuICogaHR0cDovL2pxdWVyeW1vYmlsZS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogTmFtZXNwYWNlXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogVGhlIG1vYmlsZSBuYW1lc3BhY2Ugb24gdGhlIGpRdWVyeSBvYmplY3RcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoICducycsWyBcImpxdWVyeVwiIF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59ICkoIGZ1bmN0aW9uKCAkICkge1xuXG4kLm1vYmlsZSA9IHsgdmVyc2lvbjogXCJAVkVSU0lPTlwiIH07XG5cbnJldHVybiAkLm1vYmlsZTtcbn0gKTtcblxuLyohXG4gKiBqUXVlcnkgTW9iaWxlIFRvdWNoIFN1cHBvcnQgVGVzdCBAVkVSU0lPTlxuICogaHR0cDovL2pxdWVyeW1vYmlsZS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogVG91Y2ggc3VwcG9ydCB0ZXN0XG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogVG91Y2ggZmVhdHVyZSB0ZXN0XG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCAnc3VwcG9ydC90b3VjaCcsW1xuXHRcdFx0XCJqcXVlcnlcIixcblx0XHRcdFwiLi4vbnNcIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSApKCBmdW5jdGlvbiggJCApIHtcblxudmFyIHN1cHBvcnQgPSB7XG5cdHRvdWNoOiBcIm9udG91Y2hlbmRcIiBpbiBkb2N1bWVudFxufTtcblxuJC5tb2JpbGUuc3VwcG9ydCA9ICQubW9iaWxlLnN1cHBvcnQgfHwge307XG4kLmV4dGVuZCggJC5zdXBwb3J0LCBzdXBwb3J0ICk7XG4kLmV4dGVuZCggJC5tb2JpbGUuc3VwcG9ydCwgc3VwcG9ydCApO1xuXG5yZXR1cm4gJC5zdXBwb3J0O1xufSApO1xuXG4vKiFcbiAqIGpRdWVyeSBNb2JpbGUgVG91Y2ggRXZlbnRzIEBWRVJTSU9OXG4gKiBodHRwOi8vanF1ZXJ5bW9iaWxlLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBUb3VjaFxuLy8+Pmdyb3VwOiBFdmVudHNcbi8vPj5kZXNjcmlwdGlvbjogVG91Y2ggZXZlbnRzIGluY2x1ZGluZzogdG91Y2hzdGFydCwgdG91Y2htb3ZlLCB0b3VjaGVuZCwgdGFwLCB0YXBob2xkLCBzd2lwZSwgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0XG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCAnZXZlbnRzL3RvdWNoJyxbXG5cdFx0XHRcImpxdWVyeVwiLFxuXHRcdFx0XCIuLi92bW91c2VcIixcblx0XHRcdFwiLi4vc3VwcG9ydC90b3VjaFwiIF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59ICkoIGZ1bmN0aW9uKCAkICkge1xudmFyICRkb2N1bWVudCA9ICQoIGRvY3VtZW50ICksXG5cdHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdHRvdWNoU3RhcnRFdmVudCA9IHN1cHBvcnRUb3VjaCA/IFwidG91Y2hzdGFydFwiIDogXCJtb3VzZWRvd25cIixcblx0dG91Y2hTdG9wRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0dG91Y2hNb3ZlRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuLy8gc2V0dXAgbmV3IGV2ZW50IHNob3J0Y3V0c1xuJC5lYWNoKCAoIFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgXCIgK1xuXCJ0YXAgdGFwaG9sZCBcIiArXG5cInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0JC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBmbiA/IHRoaXMuYmluZCggbmFtZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xuXG5cdC8vIGpRdWVyeSA8IDEuOFxuXHRpZiAoICQuYXR0ckZuICkge1xuXHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHRyaWdnZXJDdXN0b21FdmVudCggb2JqLCBldmVudFR5cGUsIGV2ZW50LCBidWJibGUgKSB7XG5cdHZhciBvcmlnaW5hbFR5cGUgPSBldmVudC50eXBlO1xuXHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRpZiAoIGJ1YmJsZSApIHtcblx0XHQkLmV2ZW50LnRyaWdnZXIoIGV2ZW50LCB1bmRlZmluZWQsIG9iaiApO1xuXHR9IGVsc2Uge1xuXHRcdCQuZXZlbnQuZGlzcGF0Y2guY2FsbCggb2JqLCBldmVudCApO1xuXHR9XG5cdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG59XG5cbi8vIGFsc28gaGFuZGxlcyB0YXBob2xkXG4kLmV2ZW50LnNwZWNpYWwudGFwID0ge1xuXHR0YXBob2xkVGhyZXNob2xkOiA3NTAsXG5cdGVtaXRUYXBPblRhcGhvbGQ6IHRydWUsXG5cdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHQkdGhpcyA9ICQoIHRoaXNPYmplY3QgKSxcblx0XHRcdGlzVGFwaG9sZCA9IGZhbHNlO1xuXG5cdFx0JHRoaXMuYmluZCggXCJ2bW91c2Vkb3duXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGlzVGFwaG9sZCA9IGZhbHNlO1xuXHRcdFx0aWYgKCBldmVudC53aGljaCAmJiBldmVudC53aGljaCAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHR0aW1lciwgY2xpY2tIYW5kbGVyO1xuXG5cdFx0XHRmdW5jdGlvbiBjbGVhclRhcFRpbWVyKCkge1xuXHRcdFx0XHRpZiAoIHRpbWVyICkge1xuXHRcdFx0XHRcdCR0aGlzLmJpbmQoIFwidmNsaWNrXCIsIGNsaWNrSGFuZGxlciApO1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCggdGltZXIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBjbGVhclRhcEhhbmRsZXJzKCkge1xuXHRcdFx0XHRjbGVhclRhcFRpbWVyKCk7XG5cblx0XHRcdFx0JHRoaXMudW5iaW5kKCBcInZjbGlja1wiLCBjbGlja0hhbmRsZXIgKVxuXHRcdFx0XHRcdC51bmJpbmQoIFwidm1vdXNldXBcIiwgY2xlYXJUYXBUaW1lciApO1xuXHRcdFx0XHQkZG9jdW1lbnQudW5iaW5kKCBcInZtb3VzZWNhbmNlbFwiLCBjbGVhclRhcEhhbmRsZXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Y2xlYXJUYXBIYW5kbGVycygpO1xuXG5cdFx0XHRcdC8vIE9OTFkgdHJpZ2dlciBhICd0YXAnIGV2ZW50IGlmIHRoZSBzdGFydCB0YXJnZXQgaXNcblx0XHRcdFx0Ly8gdGhlIHNhbWUgYXMgdGhlIHN0b3AgdGFyZ2V0LlxuXHRcdFx0XHRpZiAoICFpc1RhcGhvbGQgJiYgb3JpZ1RhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJ0YXBcIiwgZXZlbnQgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggaXNUYXBob2xkICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdCR0aGlzLmJpbmQoIFwidm1vdXNldXBcIiwgY2xlYXJUYXBUaW1lciApO1xuXG5cdFx0XHQkZG9jdW1lbnQuYmluZCggXCJ2bW91c2VjYW5jZWxcIiwgY2xlYXJUYXBIYW5kbGVycyApO1xuXG5cdFx0XHR0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEkLmV2ZW50LnNwZWNpYWwudGFwLmVtaXRUYXBPblRhcGhvbGQgKSB7XG5cdFx0XHRcdFx0aXNUYXBob2xkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aW1lciA9IDA7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJ0YXBob2xkXCIsICQuRXZlbnQoIFwidGFwaG9sZFwiLCB7IHRhcmdldDogb3JpZ1RhcmdldCB9ICkgKTtcblx0XHRcdH0sICQuZXZlbnQuc3BlY2lhbC50YXAudGFwaG9sZFRocmVzaG9sZCApO1xuXHRcdH0gKTtcblx0fSxcblx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdCQoIHRoaXMgKS51bmJpbmQoIFwidm1vdXNlZG93blwiICkudW5iaW5kKCBcInZjbGlja1wiICkudW5iaW5kKCBcInZtb3VzZXVwXCIgKTtcblx0XHQkZG9jdW1lbnQudW5iaW5kKCBcInZtb3VzZWNhbmNlbFwiICk7XG5cdH1cbn07XG5cbi8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcbiQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHtcblxuXHQvLyBNb3JlIHRoYW4gdGhpcyBob3Jpem9udGFsIGRpc3BsYWNlbWVudCwgYW5kIHdlIHdpbGwgc3VwcHJlc3Mgc2Nyb2xsaW5nLlxuXHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHQvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS5cblx0ZHVyYXRpb25UaHJlc2hvbGQ6IDEwMDAsXG5cblx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0aG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyID8gMTUgOiAzMCxcblxuXHQvLyBTd2lwZSB2ZXJ0aWNhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBsZXNzIHRoYW4gdGhpcy5cblx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0Z2V0TG9jYXRpb246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgd2luUGFnZVggPSB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHR3aW5QYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldCxcblx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0eSA9IGV2ZW50LmNsaWVudFk7XG5cblx0XHRpZiAoIGV2ZW50LnBhZ2VZID09PSAwICYmIE1hdGguZmxvb3IoIHkgKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VZICkgfHxcblx0XHRcdFx0ZXZlbnQucGFnZVggPT09IDAgJiYgTWF0aC5mbG9vciggeCApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVggKSApIHtcblxuXHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHQvLyBpbiBwYWdlWC9wYWdlWS4gV2hpbGUgcGFnZVgvcGFnZS8gaGF2ZSB0aGUgdmFsdWUgMFxuXHRcdFx0eCA9IHggLSB3aW5QYWdlWDtcblx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0fSBlbHNlIGlmICggeSA8ICggZXZlbnQucGFnZVkgLSB3aW5QYWdlWSApIHx8IHggPCAoIGV2ZW50LnBhZ2VYIC0gd2luUGFnZVggKSApIHtcblxuXHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0Ly8gd2hlbiBzY3JvbGxpbmcvem9vbWluZyBhIHBhZ2UuIERldGVjdGFibGUgc2luY2UgY2xpZW50WC9jbGllbnRZXG5cdFx0XHQvLyBzaG91bGQgbmV2ZXIgYmUgc21hbGxlciB0aGFuIHBhZ2VYL3BhZ2VZIG1pbnVzIHBhZ2Ugc2Nyb2xsXG5cdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdHkgPSBldmVudC5wYWdlWSAtIHdpblBhZ2VZO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeVxuXHRcdH07XG5cdH0sXG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdH07XG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHR9O1xuXHR9LFxuXG5cdGhhbmRsZVN3aXBlOiBmdW5jdGlvbiggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKSB7XG5cdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHR2YXIgZGlyZWN0aW9uID0gc3RhcnQuY29vcmRzWyAwIF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIFwic3dpcGVcIiwgJC5FdmVudCggXCJzd2lwZVwiLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9ICksIHRydWUgKTtcblx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCAkLkV2ZW50KCBkaXJlY3Rpb24sIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0gKSwgdHJ1ZSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHQvLyBpbiB3b3JrIGF0IGFueSBnaXZlbiB0aW1lXG5cdGV2ZW50SW5Qcm9ncmVzczogZmFsc2UsXG5cblx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBldmVudHMsXG5cdFx0XHR0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0Y29udGV4dCA9IHt9O1xuXG5cdFx0Ly8gUmV0cmlldmUgdGhlIGV2ZW50cyBkYXRhIGZvciB0aGlzIGVsZW1lbnQgYW5kIGFkZCB0aGUgc3dpcGUgY29udGV4dFxuXHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRpZiAoICFldmVudHMgKSB7XG5cdFx0XHRldmVudHMgPSB7IGxlbmd0aDogMCB9O1xuXHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0fVxuXHRcdGV2ZW50cy5sZW5ndGgrKztcblx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0Y29udGV4dC5zdGFydCA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQmFpbCBpZiB3ZSdyZSBhbHJlYWR5IHdvcmtpbmcgb24gYSBzd2lwZSBldmVudFxuXHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0dmFyIHN0b3AsXG5cdFx0XHRcdHN0YXJ0ID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0YXJ0KCBldmVudCApLFxuXHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRlbWl0dGVkID0gZmFsc2U7XG5cblx0XHRcdGNvbnRleHQubW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRpZiAoICFlbWl0dGVkICkge1xuXHRcdFx0XHRcdGVtaXR0ZWQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaGFuZGxlU3dpcGUoIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICk7XG5cdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZXNldCB0aGUgY29udGV4dCB0byBtYWtlIHdheSBmb3IgdGhlIG5leHQgc3dpcGUgZXZlbnRcblx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gcHJldmVudCBzY3JvbGxpbmdcblx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRjb250ZXh0LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBudWxsO1xuXHRcdFx0fTtcblxuXHRcdFx0JGRvY3VtZW50Lm9uKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlIClcblx0XHRcdFx0Lm9uZSggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdH07XG5cdFx0JHRoaXMub24oIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHR9LFxuXG5cdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZXZlbnRzLCBjb250ZXh0O1xuXG5cdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0Y29udGV4dCA9IGV2ZW50cy5zd2lwZTtcblx0XHRcdGRlbGV0ZSBldmVudHMuc3dpcGU7XG5cdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRpZiAoIGV2ZW50cy5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdCQucmVtb3ZlRGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5vZmYoIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKTtcblx0XHRcdH1cblx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaFN0b3BFdmVudCwgY29udGV4dC5zdG9wICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuJC5lYWNoKCB7XG5cdHRhcGhvbGQ6IFwidGFwXCIsXG5cdHN3aXBlbGVmdDogXCJzd2lwZS5sZWZ0XCIsXG5cdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxufSwgZnVuY3Rpb24oIGV2ZW50LCBzb3VyY2VFdmVudCApIHtcblxuXHQkLmV2ZW50LnNwZWNpYWxbIGV2ZW50IF0gPSB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0JCggdGhpcyApLmJpbmQoIHNvdXJjZUV2ZW50LCAkLm5vb3AgKTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdCQoIHRoaXMgKS51bmJpbmQoIHNvdXJjZUV2ZW50ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5yZXR1cm4gJC5ldmVudC5zcGVjaWFsO1xufSApO1xuXG5cblxufSkpO1xuIl19
