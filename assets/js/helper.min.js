!function(e){e.fn.preLoadImages=function(t){var n=[];e(this).find("img").each((function(){var t=e.Deferred(),o=new Image;o.onload=function(){t.resolve(o.src)},o.src=e(this).attr("src"),n.push(t)})),e.when.apply(null,n).done(t)}}(jQuery),String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+/,"").replace(/\s+$/,"")},String.prototype.replaceAll=function(e,t){var n=this;if("object"==typeof e)for(var o=0;o<e.length;o++)n=n.replace(new RegExp(e[o],"g"),t[o]);else"string"==typeof e&&n.replace(new RegExp(e,"g"),t);return n},jQuery.fn.swap=function(e){e=jQuery(e)[0];var t=this[0].cloneNode(!0);return this[0]=t,this.pushStack(this)},function(e){e.fn.isInViewport=function(t){t=!!t;var n=e(window),o=e(this);if(!o&&t)return console.log("isOnScreen: element undefined."),!1;var i={top:n.scrollTop()||document.body.scrollTop||document.documentElement.scrollTop,left:n.scrollLeft()||document.body.scrollLeft||document.documentElement.scrollLeft};i.right=i.left+(n.width()||Math.max(document.body.scrollWidth,document.documentElement.scrollWidth,document.body.offsetWidth,document.documentElement.offsetWidth,document.body.clientWidth,document.documentElement.clientWidth)),i.bottom=i.top+(n.height()||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)),t&&console.log("Viewport have bounds, top: "+i.top+", left: "+i.left+", right: "+i.right+", bottom: "+i.bottom);var r={top:Math.round(o.offset().top),left:Math.round(o.offset().left)};r.right=Math.round(r.left+o.outerWidth()),r.bottom=Math.round(r.top+o.outerHeight()),t&&console.log("Element have bounds, top: "+r.top+", left: "+r.left+", right: "+r.right+", bottom: "+r.bottom);var s=!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom);return t&&console.log("Element in viewport: "+s),s}}(jQuery),jQuery.fn.viewport=function(){var e=window,t="inner";return"innerWidth"in window||(t="client",e=document.documentElement||document.body),{width:e[t+"Width"],height:e[t+"Height"]}},jQuery.fn.getStyle=function(e,t,n){var o=jQuery(e).css(t);return(n=!!n)&&console.log(t+": "+o),this.css(t,o)},jQuery.fn.isEmpty=function(){return!jQuery.trim(this.html())},jQuery.fn.id=function(){return this.attr("class")?"#"+jQuery.trim(this.attr("id")):null},jQuery.fn.class=function(){return this.attr("class")?"."+this.attr("class").replace(/\s/g,"."):null},jQuery.fn.size=function(){var e=jQuery(this).length;return e||0},function(){this.leadZero=function(e,t,n){var o;e=e||0,t=t||10,n=n||!1;return o=(parseInt(e)<parseInt(t)?"0":"")+e,n&&console.log("leadZero: "+o),o}}(),function(e){var t={groups:3,classname:".item",find_elem:".sub-item",min:1};e.fn.autoGroup=function(n,o){o=o||!1;var r=e.extend({},t,n);return this.each((function(){var t=e(this).find(r.find_elem),n=t.length;if(o&&console.log("autoGroup count: "+n),n>0){var s=Math.ceil(n/r.groups);s<r.min&&(s=r.min);var a=0,u=s;for(i=0;i<r.groups;i++)t.slice(a,u).wrapAll(i+1==r.groups?'<div class="'+r.classname+' last" />':'<div class="'+r.classname+'" />'),a+=s,u+=s}else o&&console.log("autoGroup: no have child elements for group.")}))}}(jQuery),jQuery.fn.nextOrFirst=function(e){var t=this.next(e);return t.length?t:this.prevAll(e).last()},jQuery.fn.prevOrLast=function(e){var t=this.prev(e);return t.length?t:this.nextAll(e).last()},function(e){e.fn.countUp=function(t,n){n=n||!1;var o=e.extend({},e.fn.countUp.defaults,t);return this.each((function(){var t=e(this),i=0,r=0,s=parseInt(t.text()),a=Math.ceil(o.time/o.interval),u=s/a;if(s>0){n&&console.log("countUp start of lops, count: "+a);var c=setInterval((function(){i<a?(r+=u,t.text(Math.round(r))):(clearInterval(c),t.text(s),n&&console.log("countUp end of lops, current: "+i)),i++}),o.interval)}else n&&console.log("countUp: element no have int value.")}))},e.fn.countUp.defaults={interval:100,time:3e3}}(jQuery),function(e){e.fn.countDown=function(t,n){n=n||!1;var o=e.extend({},e.fn.countDown.defaults,t);return this.each((function(){var t=e(this),i=0,r=0,s=parseInt(t.text()),a=Math.ceil(o.time/o.interval),u=s/a;if(s>0){n&&console.log("countDown start of lops, count: "+a),r=s;var c=setInterval((function(){i<a?(r-=u,t.text(Math.round(r))):(clearInterval(c),t.text(0),n&&console.log("countDown end of lops, current: "+i)),i++}),o.interval)}else n&&console.log("countDown: element no have int value.")}))},e.fn.countDown.defaults={interval:100,time:3e3}}(jQuery),function(){this.uniqID=function(e,t,n,o){var i;e=e||"",t=t||!1,n=n||!1,o=o||!1;return this.seed=function(e,t){return t<(e=parseInt(e,10).toString(16)).length?e.slice(e.length-t):t>e.length?new Array(t-e.length+1).join("0")+e:e},i=n?e+(String.fromCharCode(Math.floor(11*Math.random()))+Math.floor(1e6*Math.random())).trim():e+(this.seed(parseInt((new Date).getTime()/1e3,10),8)+this.seed(Math.floor(123456789*Math.random())+1,5)).trim(),t&&(i+=(10*Math.random()).toFixed(8).toString()),o&&console.log("uniqID: "+i),i}}(),function(e){e.fn.horizontalScroll=function(t,n){n=n||!1,t=t||120,e(this).bind("DOMMouseScroll mousewheel",(function(o){var i=o.originalEvent,r=i.detail?i.detail*-t:i.wheelDelta,s=e(this).scrollLeft();s+=r>0?-t:t,e(this).scrollLeft(s),n&&s==e(this).scrollLeft()+t||n&&s==-t||o.preventDefault()}))}}(jQuery),jQuery.fn.outerHtml=function(){return jQuery("<div />").append(jQuery(this).clone()).html()},function(e){function t(e,t){for(var n=[],o=e.firstChild;o;o=o.nextSibling)3==o.nodeType&&n.push(o.nodeValue);return n.join(t)}e.fn.textNotChild=function(n,o){return arguments.length<2&&(o=""),arguments.length<1&&(n=""),e.map(this,(function(e){return t(e,o)})).join(n)}}(jQuery),jQuery.fn.readingTime=function(e,t){var n,o=this[0],i=(e=jQuery(e)[0]||120,t=!!t,jQuery(o).text().toString().replace(/\r\n?|\n/g," ").replace(/ {2,}/g," ").replace(/^ /,"").replace(/ $/,"").split(" ").length),r=Math.floor(i/e),s=Math.floor(i%e/(e/60));return n=1<=r?r+" minute"+(1==r?"":"s")+", "+s+" second"+(1==s?"":"s"):r+" second"+(1==r?"":"s"),t&&console.log("readingTime() words: "+i+", reading by"+n),n};var declOfNum=function(){var e=[2,0,1,1,1,2],t=function(t,n){return t[(n=Math.abs(n))%100>4&&n%100<20?2:e[n%10<5?n%10:5]]};return function(e){return 1===arguments.length?function(n){return t(e,n)}:t.apply(null,arguments)}}();jQuery.fn.autoCurrying=function(e,t,n,o){var i=jQuery(this),r=e||!1,s=t||!1;return(o=!!o)&&console.log(r+" "+declOfNum(s,r)),onlyends?i.text(declOfNum(s,r)):i.text(r+" "+declOfNum(s,r))};var loadJSONP=function(){var e=0;return function(t,n,o){var i="_jsonp_"+e++;t.match(/\?/)?t+="&callback="+i:t+="?callback="+i;var r=document.createElement("script");r.type="text/javascript",r.src=t,window[i]=function(e){n.call(o||window,e),document.getElementsByTagName("head")[0].removeChild(r),r=null,delete window[i]},document.getElementsByTagName("head")[0].appendChild(r)}}();const fetchJSONP=(e=>t=>new Promise((n=>{const o=document.createElement("script"),i="_jsonp_"+e++;t.match(/\?/)?t+="&callback="+i:t+="?callback="+i,o.src=t,window[i]=e=>{n(new Response(JSON.stringify(e))),o.remove(),delete window[i]},document.body.appendChild(o)})))(0),getOS=()=>{let e=window.navigator.userAgent,t=window.navigator.platform,n=null;return-1!==["Macintosh","MacIntel","MacPPC","Mac68K"].indexOf(t)?n="Mac OS":-1!==["iPhone","iPad","iPod"].indexOf(t)?n="iOS":-1!==["Win32","Win64","Windows","WinCE"].indexOf(t)?n="Windows":/Android/.test(e)?n="Android":!n&&/Linux/.test(t)&&(n="Linux"),n};function readCookie(e){var t,n,o=document.cookie.split("; "),i={};for(t=o.length-1;t>=0;t--)i[(n=o[t].split("="))[0]]=n[1];return i[e]}function locationHash(e){var t={};return window.location.href.replace(location.hash,"").replace(/[?&]+([^=&]+)=?([^&]*)?/gi,(function(e,n,o){t[n]=void 0!==o?o:""})),e?t[e]?t[e]:null:t}var matched,browser;function smoothScroll(){window.addEventListener&&window.addEventListener("DOMMouseScroll",t,!1),window.onmousewheel=document.onmousewheel=t;var e={sTop:0,sDelta:0};function t(t){var n=jQuery.browser.webkit?60:120;t.wheelDelta?delta=t.wheelDelta/120:t.detail&&(delta=-t.detail/3),e.sTop=jQuery(window).scrollTop(),e.sDelta=e.sDelta+delta*n,jQuery(e).stop().animate({sTop:jQuery(window).scrollTop()-e.sDelta,sDelta:0},{duration:200,easing:"linear",step:function(e,t){"sTop"==t.prop&&jQuery("html, body").scrollTop(e)}}),t.preventDefault&&t.preventDefault(),t.returnValue=!1}}jQuery.fn.checkSVG=function(){return void 0!==document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect?jQuery(this).removeClass("no-svg"):jQuery(this).addClass("no-svg")},jQuery.fn.checkFlexbox=function(){return"flexWrap"in document.documentElement.style||"WebkitFlexWrap"in document.documentElement.style||"msFlexWrap"in document.documentElement.style?jQuery(this).removeClass("no-flex"):jQuery(this).addClass("no-flex")},jQuery.fn.cloneItems=function(e,t,n){var o=jQuery(this);t=t||2,n=!!n;return o.find(e).each((function(){for(var e=$(this),n=1;n<t;n++)e.after($(this).clone())})),n&&console.log(o),o},jQuery.fn.splitClone=function(e,t,n){var o=jQuery(this);t=t||2,n=!!n;return o.find(e).each((function(){for(var e=$(this),n=1;n<t;n++)(e=e.next()).length||(e=$(this).siblings(":first")),e.children(":first-child").clone().appendTo($(this))})),n&&console.log(o),o},jQuery.fn.detectCollisions=function(e,t){var n=jQuery(this),o=jQuery(e),i=(t=!!t,{offsetX1:n.offset().left,offsetY1:n.offset().top,height1:n.outerHeight(!0),width1:n.outerWidth(!0),boundingBoxY1:n.offset().top+n.outerHeight(!0),boundingBoxX1:n.offset().left+n.outerWidth(!0),offsetX2:o.offset().left+1,offsetY2:o.offset().top+1,height2:o.outerHeight(!0),width2:o.outerWidth(!0),boundingBoxY2:o.offset().top+1+o.outerHeight(!0),boundingBoxX2:o.offset().left+1+o.outerWidth(!0)});return t&&console.log(i),!(i.boundingBoxY1<i.offsetY2||i.offsetX1>i.boundingBoxY2||i.boundingBoxX1<i.offsetX2||i.offsetX1>i.boundingBoxX2)},jQuery.fn.splitByWidth=function(e,t,n,o,i){var r=0,s=$(this),a=!!t&&$(t),u=(n=n||0,i=!!i,(o=!!o)?$(s).outerWidth(!0):$(s).width());return n&&(r=n),(i=!!i)&&o?console.log("Countainer outer width: "+u):i&&console.log("Countainer width: "+u),$(this).find(e).each((function(){var e=o?$(this).outerWidth(!0):$(this).width();(r+=e)>=u&&(a&&a.append($(this).outerHtml()),i&&console.log("Element out of container width and has been removed."),$(this).remove())})),i&&o?console.log("Summary outer width: "+r):i&&console.log("Summary width: "+r),this},jQuery.fn.splitByHeight=function(e,t,n,o,i){var r=0,s=$(this),a=!!t&&$(t),u=(n=n||0,i=!!i,(o=!!o)?$(s).outerHeight(!0):$(s).height());return n&&(r=n),(i=!!i)&&o?console.log("Countainer outer height: "+u):i&&console.log("Countainer height: "+u),$(this).find(e).each((function(){var e=o?$(this).outerHeight(!0):$(this).height();(r+=e)>=u&&(a&&a.append($(this).outerHtml()),i&&console.log("Element out of container height and has been removed."),$(this).remove())})),i&&o?console.log("Summary outer height: "+r):i&&console.log("Summary height: "+r),this},jQuery.fn.maxHeight=function(e,t){e=!!e,t=!!t;var n=0;return this.each((function(){if(e)var t=$(this).outerHeight();else t=$(this).height();t>n&&(n=t)})),t&&console.log("Max height of elements: "+n),n},jQuery.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},browser={},(matched=jQuery.uaMatch(navigator.userAgent)).browser&&(browser[matched.browser]=!0,browser.version=matched.version),browser.chrome?browser.webkit=!0:browser.webkit&&(browser.safari=!0),jQuery.browser=browser,function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],(function(o){return n(o,e,t),o.mobile})):n(e.jQuery,e,t)}(this,document,(function(e,t,n,o){
/*!
 * jQuery Mobile Virtual Mouse @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
var i;i=function(e){var t,i,r="virtualMouseBindings",s="virtualTouchID",a="clientX clientY pageX pageY screenX screenY".split(" "),u="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),c="altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),l=e.event.mouseHooks?e.event.mouseHooks.props:[],h=c.concat(l),d={},f=0,p=0,m=0,v=!1,g=[],w=!1,y=!1,b="addEventListener"in n,T=e(n),j=1,x=0;function Q(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function D(t){for(var n,o,i={};t;){for(o in n=e.data(t,r))n[o]&&(i[o]=i.hasVirtualBinding=!0);t=t.parentNode}return i}function M(){y=!0}function E(){x=0,g.length=0,w=!1,M()}function S(){y=!1}function I(){f&&(clearTimeout(f),f=0)}function k(){I(),f=setTimeout((function(){f=0,E()}),e.vmouse.resetTimerDuration)}function $(t,n,i){var s;return(i&&i[t]||!i&&function(t,n){for(var o;t;){if((o=e.data(t,r))&&(!n||o[n]))return t;t=t.parentNode}return null}(n.target,t))&&(s=function(t,n){var i,r,s,u,l,d,f,p,m,v=t.type;if((t=e.Event(t)).type=n,i=t.originalEvent,r=c,v.search(/^(mouse|click)/)>-1&&(r=h),i)for(f=r.length;f;)t[u=r[--f]]=i[u];if(v.search(/mouse(down|up)|click/)>-1&&!t.which&&(t.which=1),-1!==v.search(/^touch/)&&(v=(s=Q(i)).touches,l=s.changedTouches,d=v&&v.length?v[0]:l&&l.length?l[0]:o))for(p=0,m=a.length;p<m;p++)t[u=a[p]]=d[u];return t}(n,t),e(n.target).trigger(s)),s}function W(t){var n,o=e.data(t.target,s);"click"===t.type&&"touchstart"===e.data(t.target,"lastTouchType")&&setTimeout((function(){"touchstart"===e.data(t.target,"lastTouchType")&&(E(),delete e.data(t.target).lastTouchType,W(t))}),e.vmouse.maximumTimeBetweenTouches),w||x&&x===o||(n=$("v"+t.type,t))&&(n.isDefaultPrevented()&&t.preventDefault(),n.isPropagationStopped()&&t.stopPropagation(),n.isImmediatePropagationStopped()&&t.stopImmediatePropagation())}function O(t){var n,o,i,r=Q(t).touches;r&&1===r.length&&(o=D(n=t.target),e.data(t.target,"lastTouchType",t.type),o.hasVirtualBinding&&(x=j++,e.data(n,s,x),I(),S(),v=!1,i=Q(t).touches[0],p=i.pageX,m=i.pageY,$("vmouseover",t,o),$("vmousedown",t,o)))}function P(t){y||(v||$("vmousecancel",t,D(t.target)),e.data(t.target,"lastTouchType",t.type),v=!0,k())}function H(t){if(!y){var n=Q(t).touches[0],o=v,i=e.vmouse.moveDistanceThreshold,r=D(t.target);e.data(t.target,"lastTouchType",t.type),(v=v||Math.abs(n.pageX-p)>i||Math.abs(n.pageY-m)>i)&&!o&&$("vmousecancel",t,r),$("vmousemove",t,r),k()}}function C(t){if(!y&&e.data(t.target,"lastTouchType")!==o){M(),delete e.data(t.target).lastTouchType;var n,i,r=D(t.target);$("vmouseup",t,r),v||(n=$("vclick",t,r))&&n.isDefaultPrevented()&&(i=Q(t).changedTouches[0],g.push({touchID:x,x:i.clientX,y:i.clientY}),w=!0),$("vmouseout",t,r),v=!1,k()}}function X(t){var n,o=e.data(t,r);if(o)for(n in o)if(o[n])return!0;return!1}function Y(){}function L(t){var n=t.substr(1);return{setup:function(){X(this)||e.data(this,r,{}),e.data(this,r)[t]=!0,d[t]=(d[t]||0)+1,1===d[t]&&T.bind(n,W),e(this).bind(n,Y),b&&(d.touchstart=(d.touchstart||0)+1,1===d.touchstart&&T.bind("touchstart",O).bind("touchend",C).bind("touchmove",H).bind("scroll",P))},teardown:function(){--d[t],d[t]||T.unbind(n,W),b&&(--d.touchstart,d.touchstart||T.unbind("touchstart",O).unbind("touchmove",H).unbind("touchend",C).unbind("scroll",P));var o=e(this),i=e.data(this,r);i&&(i[t]=!1),o.unbind(n,Y),X(this)||o.removeData(r)}}}for(e.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500,maximumTimeBetweenTouches:100},i=0;i<u.length;i++)e.event.special[u[i]]=L(u[i]);b&&n.addEventListener("click",(function(n){var o,i,r,a,u,c=g.length,l=n.target;if(c)for(o=n.clientX,i=n.clientY,t=e.vmouse.clickDistanceThreshold,r=l;r;){for(a=0;a<c;a++)if(u=g[a],r===l&&Math.abs(u.x-o)<t&&Math.abs(u.y-i)<t||e.data(r,s)===u.touchID)return n.preventDefault(),void n.stopPropagation();r=r.parentNode}}),!0)},"function"==typeof define&&define.amd?define("vmouse",["jquery"],i):i(e),
/*!
 * jQuery Mobile Namespace @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("ns",["jquery"],t):t(e)}((function(e){return e.mobile={version:"@VERSION"},e.mobile})),
/*!
 * jQuery Mobile Touch Support Test @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("support/touch",["jquery","../ns"],t):t(e)}((function(e){var t={touch:"ontouchend"in n};return e.mobile.support=e.mobile.support||{},e.extend(e.support,t),e.extend(e.mobile.support,t),e.support})),
/*!
 * jQuery Mobile Touch Events @VERSION
 * http://jquerymobile.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function(t){"function"==typeof define&&define.amd?define("events/touch",["jquery","../vmouse","../support/touch"],t):t(e)}((function(e){var i=e(n),r=e.mobile.support.touch,s=r?"touchstart":"mousedown",a=r?"touchend":"mouseup",u=r?"touchmove":"mousemove";function c(t,n,i,r){var s=i.type;i.type=n,r?e.event.trigger(i,o,t):e.event.dispatch.call(t,i),i.type=s}return e.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight".split(" "),(function(t,n){e.fn[n]=function(e){return e?this.bind(n,e):this.trigger(n)},e.attrFn&&(e.attrFn[n]=!0)})),e.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var t=this,n=e(t),o=!1;n.bind("vmousedown",(function(r){if(o=!1,r.which&&1!==r.which)return!0;var s,a,u=r.target;function l(){s&&(n.bind("vclick",a),clearTimeout(s))}function h(){l(),n.unbind("vclick",a).unbind("vmouseup",l),i.unbind("vmousecancel",h)}a=function(e){h(),o||u!==e.target?o&&e.preventDefault():c(t,"tap",e)},n.bind("vmouseup",l),i.bind("vmousecancel",h),s=setTimeout((function(){e.event.special.tap.emitTapOnTaphold||(o=!0),s=0,c(t,"taphold",e.Event("taphold",{target:u}))}),e.event.special.tap.tapholdThreshold)}))},teardown:function(){e(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),i.unbind("vmousecancel")}},e.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:t.devicePixelRatio>=2?15:30,verticalDistanceThreshold:t.devicePixelRatio>=2?15:30,getLocation:function(e){var n=t.pageXOffset,o=t.pageYOffset,i=e.clientX,r=e.clientY;return 0===e.pageY&&Math.floor(r)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(i)>Math.floor(e.pageX)?(i-=n,r-=o):(r<e.pageY-o||i<e.pageX-n)&&(i=e.pageX-n,r=e.pageY-o),{x:i,y:r}},start:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,o=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[o.x,o.y],origin:e(t.target)}},stop:function(t){var n=t.originalEvent.touches?t.originalEvent.touches[0]:t,o=e.event.special.swipe.getLocation(n);return{time:(new Date).getTime(),coords:[o.x,o.y]}},handleSwipe:function(t,n,o,i){if(n.time-t.time<e.event.special.swipe.durationThreshold&&Math.abs(t.coords[0]-n.coords[0])>e.event.special.swipe.horizontalDistanceThreshold&&Math.abs(t.coords[1]-n.coords[1])<e.event.special.swipe.verticalDistanceThreshold){var r=t.coords[0]>n.coords[0]?"swipeleft":"swiperight";return c(o,"swipe",e.Event("swipe",{target:i,swipestart:t,swipestop:n}),!0),c(o,r,e.Event(r,{target:i,swipestart:t,swipestop:n}),!0),!0}return!1},eventInProgress:!1,setup:function(){var t,n=this,o=e(n),r={};(t=e.data(this,"mobile-events"))||(t={length:0},e.data(this,"mobile-events",t)),t.length++,t.swipe=r,r.start=function(t){if(!e.event.special.swipe.eventInProgress){e.event.special.swipe.eventInProgress=!0;var o,s=e.event.special.swipe.start(t),c=t.target,l=!1;r.move=function(t){s&&!t.isDefaultPrevented()&&(o=e.event.special.swipe.stop(t),l||(l=e.event.special.swipe.handleSwipe(s,o,n,c))&&(e.event.special.swipe.eventInProgress=!1),Math.abs(s.coords[0]-o.coords[0])>e.event.special.swipe.scrollSupressionThreshold&&t.preventDefault())},r.stop=function(){l=!0,e.event.special.swipe.eventInProgress=!1,i.off(u,r.move),r.move=null},i.on(u,r.move).one(a,r.stop)}},o.on(s,r.start)},teardown:function(){var t,n;(t=e.data(this,"mobile-events"))&&(n=t.swipe,delete t.swipe,t.length--,0===t.length&&e.removeData(this,"mobile-events")),n&&(n.start&&e(this).off(s,n.start),n.move&&i.off(u,n.move),n.stop&&i.off(a,n.stop))}},e.each({taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},(function(t,n){e.event.special[t]={setup:function(){e(this).bind(n,e.noop)},teardown:function(){e(this).unbind(n)}}})),e.event.special}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
